{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo Node.js","text":"<p>\u00a1Bienvenidos a este emocionante viaje por el universo de Node.js! Este curso est\u00e1 dise\u00f1ado para introducirte en el desarrollo backend con una de las tecnolog\u00edas m\u00e1s potentes y vers\u00e1tiles del ecosistema JavaScript. Tanto si eres un principiante como si ya tienes experiencia en programaci\u00f3n, este programa te proporcionar\u00e1 las habilidades pr\u00e1cticas necesarias para destacar en la creaci\u00f3n de aplicaciones server-side escalables y eficientes.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso cubre una amplia gama de temas esenciales y avanzados, organizados en m\u00f3dulos pr\u00e1cticos:</p>"},{"location":"#fundamentos-de-nodejs","title":"Fundamentos de Node.js","text":"<ul> <li>Conceptos b\u00e1sicos: Aprender\u00e1s qu\u00e9 es Node.js, su arquitectura basada en eventos y su rol en el desarrollo backend moderno.</li> <li>M\u00f3dulos y npm: Descubrir\u00e1s c\u00f3mo trabajar con m\u00f3dulos nativos, crear tus propios m\u00f3dulos y gestionar dependencias con npm.</li> <li>APIs RESTful: Dise\u00f1ar\u00e1s y construir\u00e1s APIs robustas para conectar aplicaciones frontend con servidores backend.</li> <li>Herramientas de desarrollo: Configurar\u00e1s entornos como Visual Studio Code, Node.js y herramientas como Nodemon para optimizar tu flujo de trabajo.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina aprendizaje te\u00f3rico y pr\u00e1ctico para que desarrolles habilidades s\u00f3lidas:</p> <ul> <li>Clases te\u00f3ricas: Fundamentos claros sobre programaci\u00f3n as\u00edncrona, manejo de eventos y paradigmas de Node.js.</li> <li>Ejercicios pr\u00e1cticos: Actividades guiadas para escribir c\u00f3digo, depurar errores y construir aplicaciones backend funcionales.</li> <li>Proyectos reales: Crear\u00e1s aplicaciones como servidores web, APIs y sistemas de gesti\u00f3n de datos en tiempo real.</li> </ul>"},{"location":"#compromiso-de-el-sena","title":"Compromiso de El SENA","text":"<p>En El SENA, nuestro compromiso es tu desarrollo integral. Este curso no solo busca ense\u00f1arte las bases de Node.js, sino tambi\u00e9n inspirarte a crear soluciones backend innovadoras que impulsen aplicaciones modernas. Al finalizar este programa, tendr\u00e1s las competencias necesarias para desarrollar aplicaciones server-side escalables, optimizar procesos tecnol\u00f3gicos y contribuir a proyectos de desarrollo backend de vanguardia.</p>"},{"location":"#embarcate-en-esta-aventura-tecnologica","title":"\u00a1Emb\u00e1rcate en esta aventura tecnol\u00f3gica!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s creando servidores robustos, dise\u00f1ando APIs funcionales y resolviendo problemas reales en proyectos de desarrollo backend innovadores.</p> <p>\u00a1Bienvenido al mundo de Node.js!</p>"},{"location":"about/","title":"\ud83d\ude80 El Subm\u00f3dulo Node.js","text":"<p>El Subm\u00f3dulo Node.js es una iniciativa educativa del SENA, dise\u00f1ada para introducir a los estudiantes en el fascinante mundo del desarrollo backend con Node.js, con \u00e9nfasis en herramientas clave como la programaci\u00f3n as\u00edncrona, la creaci\u00f3n de APIs RESTful y el desarrollo de aplicaciones server-side escalables. Este curso combina teor\u00eda y pr\u00e1ctica para ofrecer una base s\u00f3lida en el dise\u00f1o, desarrollo e implementaci\u00f3n de soluciones backend aplicables a la industria moderna.</p>"},{"location":"about/#proposito-del-curso","title":"Prop\u00f3sito del Curso","text":"<p>Este curso tiene como objetivo formar a los estudiantes en el desarrollo de aplicaciones backend con Node.js, capacit\u00e1ndolos para resolver problemas reales, desde la creaci\u00f3n de servidores robustos hasta la integraci\u00f3n con bases de datos y servicios externos. Al finalizar, los participantes estar\u00e1n listos para aplicar sus habilidades en entornos profesionales, desarrollando soluciones innovadoras y participando en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1\u00danete a nosotros y comienza tu camino hacia el futuro del desarrollo backend con Node.js!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/curso/","title":"Estructura del Curso: Desarrollo de APIs REST con Node.js","text":"<p>Duraci\u00f3n total: 10 clases de 6 horas (60 horas) Objetivo: Capacitar a los estudiantes en el dise\u00f1o, desarrollo, testing y despliegue de APIs RESTful utilizando Node.js, Express y mejores pr\u00e1cticas. Nivel: Intermedio (se asume conocimiento b\u00e1sico de JavaScript y programaci\u00f3n). Metodolog\u00eda: Teor\u00eda (30%), pr\u00e1ctica (60%), ejercicios y proyecto final (10%).  </p>"},{"location":"content/curso/#clase-1-introduccion-a-nodejs-y-apis-rest","title":"Clase 1: Introducci\u00f3n a Node.js y APIs REST","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Comprender los fundamentos de Node.js, el modelo cliente-servidor y el concepto de APIs REST. Contenido: - Introducci\u00f3n a Node.js: caracter\u00edsticas, arquitectura y casos de uso. - Instalaci\u00f3n y configuraci\u00f3n del entorno (Node.js, npm, VS Code). - Conceptos de APIs REST: m\u00e9todos HTTP, c\u00f3digos de estado, JSON. - Creaci\u00f3n de un servidor b\u00e1sico con Node.js puro. - Introducci\u00f3n a Express.js: instalaci\u00f3n y primer endpoint. Pr\u00e1ctica: - Configurar entorno de desarrollo. - Crear un servidor con Node.js puro y Express que responda \"Hola, mundo\" en <code>/</code>. Recursos: Node.js oficial, documentaci\u00f3n de Express, Postman.  </p>"},{"location":"content/curso/#clase-2-fundamentos-de-expressjs-y-rutas","title":"Clase 2: Fundamentos de Express.js y Rutas","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Dominar el manejo de rutas y middlewares en Express.js. Contenido: - Estructura de un proyecto con Express. - Definici\u00f3n de rutas: GET, POST, PUT, DELETE. - Middlewares: concepto, creaci\u00f3n y uso (logging, autenticaci\u00f3n b\u00e1sica). - Manejo de par\u00e1metros y query strings. - Respuestas HTTP: JSON, c\u00f3digos de estado. Pr\u00e1ctica: - Crear una API con rutas para gestionar una lista de usuarios (sin base de datos). - Implementar un middleware para logging de solicitudes. Recursos: Documentaci\u00f3n de Express, ejemplos de middlewares.  </p>"},{"location":"content/curso/#clase-3-conexion-con-bases-de-datos-mongodb","title":"Clase 3: Conexi\u00f3n con Bases de Datos (MongoDB)","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Integrar MongoDB con Node.js para persistencia de datos. Contenido: - Introducci\u00f3n a bases de datos NoSQL y MongoDB. - Instalaci\u00f3n y configuraci\u00f3n de MongoDB (local o Atlas). - Uso de Mongoose: conexi\u00f3n, modelos y esquemas. - CRUD b\u00e1sico: crear, leer, actualizar y eliminar documentos. - Manejo de errores en operaciones de base de datos. Pr\u00e1ctica: - Configurar MongoDB Atlas y conectar con Mongoose. - Crear un modelo de \"Producto\" y endpoints CRUD. Recursos: MongoDB Atlas, documentaci\u00f3n de Mongoose.  </p>"},{"location":"content/curso/#clase-4-validacion-y-manejo-de-errores","title":"Clase 4: Validaci\u00f3n y Manejo de Errores","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Implementar validaciones robustas y manejar errores en la API. Contenido: - Validaci\u00f3n de datos con Joi o Express Validator. - Creaci\u00f3n de middlewares para validaci\u00f3n. - Estructuraci\u00f3n de respuestas de error consistentes. - Manejo de excepciones globales. - Introducci\u00f3n a logging avanzado (Winston o Morgan). Pr\u00e1ctica: - Agregar validaci\u00f3n a los endpoints CRUD de productos. - Implementar un middleware de manejo de errores global. Recursos: Documentaci\u00f3n de Joi, Winston, ejemplos de logging.  </p>"},{"location":"content/curso/#clase-5-autenticacion-y-autorizacion","title":"Clase 5: Autenticaci\u00f3n y Autorizaci\u00f3n","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Implementar autenticaci\u00f3n basada en JWT y autorizaci\u00f3n basada en roles. Contenido: - Introducci\u00f3n a autenticaci\u00f3n: tokens, sesiones, OAuth. - JSON Web Tokens (JWT): generaci\u00f3n y verificaci\u00f3n. - Middleware de autenticaci\u00f3n. - Autorizaci\u00f3n basada en roles (admin, usuario). - Seguridad b\u00e1sica: protecci\u00f3n contra ataques comunes (XSS, CSRF). Pr\u00e1ctica: - Crear endpoints de registro y login con JWT. - Proteger rutas con middleware de autenticaci\u00f3n y roles. Recursos: Documentaci\u00f3n de jsonwebtoken, OWASP.  </p>"},{"location":"content/curso/#clase-6-relaciones-y-consultas-avanzadas","title":"Clase 6: Relaciones y Consultas Avanzadas","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Manejar relaciones entre modelos y optimizar consultas. Contenido: - Relaciones en MongoDB: referencias y documentos embebidos. - Consultas avanzadas con Mongoose: agregaciones, filtros, paginaci\u00f3n. - Optimizaci\u00f3n de rendimiento: \u00edndices, caching b\u00e1sico. - Introducci\u00f3n a population en Mongoose. Pr\u00e1ctica: - Crear un modelo de \"Pedidos\" con relaci\u00f3n a \"Productos\". - Implementar endpoints con paginaci\u00f3n y filtros. Recursos: Documentaci\u00f3n de Mongoose (agregaciones, population).  </p>"},{"location":"content/curso/#clase-7-testing-de-apis","title":"Clase 7: Testing de APIs","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Aprender a escribir pruebas unitarias e integrales para APIs. Contenido: - Introducci\u00f3n al testing: unitario, integraci\u00f3n, end-to-end. - Configuraci\u00f3n de Jest y Supertest. - Escritura de pruebas para endpoints CRUD. - Mocking de bases de datos y servicios externos. - Generaci\u00f3n de reportes de cobertura. Pr\u00e1ctica: - Escribir pruebas unitarias para un controlador de productos. - Escribir pruebas de integraci\u00f3n para endpoints autenticados. Recursos: Documentaci\u00f3n de Jest, Supertest.  </p>"},{"location":"content/curso/#clase-8-documentacion-y-versionado","title":"Clase 8: Documentaci\u00f3n y Versionado","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Documentar la API y gestionar versiones. Contenido: - Importancia de la documentaci\u00f3n en APIs. - Uso de Swagger/OpenAPI para documentar endpoints. - Configuraci\u00f3n de Swagger UI en Express. - Estrategias de versionado: URI, headers. - Introducci\u00f3n a buenas pr\u00e1cticas (CORS, rate limiting). Pr\u00e1ctica: - Documentar la API de productos con Swagger. - Implementar versionado en un endpoint. Recursos: Swagger UI, OpenAPI Specification.  </p>"},{"location":"content/curso/#clase-9-despliegue-y-escalabilidad","title":"Clase 9: Despliegue y Escalabilidad","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Desplegar la API en producci\u00f3n y entender conceptos de escalabilidad. Contenido: - Preparaci\u00f3n para producci\u00f3n: variables de entorno, seguridad. - Despliegue en plataformas como Render, Heroku o Vercel. - Configuraci\u00f3n de CI/CD b\u00e1sico con GitHub Actions. - Introducci\u00f3n a escalabilidad: clustering, PM2, balanceo de carga. - Monitoreo b\u00e1sico con herramientas como New Relic. Pr\u00e1ctica: - Desplegar la API en Render. - Configurar variables de entorno y CI/CD. Recursos: Documentaci\u00f3n de Render, PM2, GitHub Actions.  </p>"},{"location":"content/curso/#clase-10-proyecto-final-y-cierre","title":"Clase 10: Proyecto Final y Cierre","text":"<p>Duraci\u00f3n: 6 horas Objetivos: Aplicar todo lo aprendido en un proyecto final y cerrar el curso. Contenido: - Revisi\u00f3n de conceptos clave del curso. - Desarrollo guiado de un proyecto final: API completa (e.g., sistema de gesti\u00f3n de tareas). - Presentaci\u00f3n de proyectos por parte de los estudiantes. - Discusi\u00f3n sobre siguientes pasos: microservicios, GraphQL, TypeScript. - Entrega de certificados y feedback. Pr\u00e1ctica: - Completar una API con autenticaci\u00f3n, CRUD, documentaci\u00f3n y despliegue. - Presentar el proyecto al grupo. Recursos: Repositorio del proyecto, ejemplos de APIs completas.  </p>"},{"location":"content/curso/#evaluacion","title":"Evaluaci\u00f3n","text":"<ul> <li>Participaci\u00f3n y ejercicios: 30%  </li> <li>Proyecto final: 50%  </li> <li>Pruebas y documentaci\u00f3n: 20%  </li> </ul>"},{"location":"content/curso/#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Conocimiento b\u00e1sico de JavaScript (ES6+).  </li> <li>Familiaridad con la l\u00ednea de comandos y Git.  </li> <li>Computadora con Node.js y MongoDB instalados.  </li> </ul>"},{"location":"content/curso/#material-adicional","title":"Material Adicional","text":"<ul> <li>Repositorio GitHub con ejemplos y ejercicios.  </li> <li>Lista de lecturas recomendadas: \"Node.js Design Patterns\", \"RESTful API Design\".  </li> <li>Acceso a comunidad en Discord/Slack para soporte.  </li> </ul>"},{"location":"content/p0/","title":"Introducci\u00f3n a Node.js:","text":""},{"location":"content/p0/#1-caracteristicas-arquitectura-y-casos-de-uso","title":"1. Caracter\u00edsticas, Arquitectura y Casos de Uso","text":"<p>Explicaci\u00f3n: Node.js es un entorno de ejecuci\u00f3n de JavaScript que permite ejecutar c\u00f3digo fuera del navegador, en el lado del servidor. Fue creado en 2009 por Ryan Dahl y utiliza el motor V8 de Google Chrome para ejecutar JavaScript de manera eficiente.</p>"},{"location":"content/p0/#caracteristicas","title":"Caracter\u00edsticas:","text":"<ul> <li>As\u00edncrono y No Bloqueante: Node.js maneja operaciones de entrada/salida (como leer archivos o consultar bases de datos) sin bloquear el hilo principal, permitiendo procesar m\u00faltiples solicitudes simult\u00e1neamente.  </li> <li>Ejemplo: Un servidor puede responder a un cliente mientras espera datos de una base de datos.</li> <li>Basado en Eventos: Utiliza un Event Loop para responder a eventos (como solicitudes HTTP) mediante callbacks, promesas o async/await.</li> <li>Single-Threaded: Opera en un solo hilo principal, pero delega tareas pesadas a un Thread Pool, lo que lo hace eficiente para operaciones I/O-intensivas.</li> <li>R\u00e1pido: El motor V8 compila JavaScript a c\u00f3digo m\u00e1quina, ofreciendo alto rendimiento.</li> <li>Ecosistema npm: Incluye npm, el gestor de paquetes m\u00e1s grande, con miles de bibliotecas (como Express para APIs o Mongoose para MongoDB).</li> <li>Multiplataforma: Compatible con Windows, macOS y Linux.</li> <li>JavaScript Full-Stack: Permite usar JavaScript tanto en el frontend como en el backend.</li> </ul>"},{"location":"content/p0/#arquitectura","title":"Arquitectura:","text":"<p>Node.js est\u00e1 dise\u00f1ado para ser ligero y eficiente, con los siguientes componentes clave:</p> <ul> <li>Motor V8: Ejecuta JavaScript a nivel de m\u00e1quina.</li> <li>Event Loop: Gestiona eventos y operaciones as\u00edncronas, procesando tareas en un ciclo continuo (verifica eventos \u2192 ejecuta callbacks \u2192 repite).</li> <li>Libuv: Biblioteca en C que maneja operaciones as\u00edncronas (I/O, red, archivos) y proporciona el Event Loop.</li> <li>Thread Pool: Ejecuta tareas bloqueantes (como operaciones de archivo) en hilos secundarios.</li> <li>M\u00f3dulos Nativos: Incluye m\u00f3dulos como <code>http</code>, <code>fs</code> (file system) y <code>path</code> para tareas comunes.</li> </ul> <p>Flujo b\u00e1sico:  </p> <ol> <li>Una solicitud (como una petici\u00f3n HTTP) llega al servidor.  </li> <li>El Event Loop la recibe y la delega a Libuv o al Thread Pool si es necesario.  </li> <li>Una vez completada, el callback asociado se ejecuta y se env\u00eda la respuesta al cliente.</li> </ol>"},{"location":"content/p0/#casos-de-uso","title":"Casos de Uso:","text":"<ul> <li>APIs RESTful: Crear APIs para aplicaciones web/m\u00f3viles (ejemplo: backend de una tienda en l\u00ednea).</li> <li>Aplicaciones en Tiempo Real: Chats, juegos o colaboraci\u00f3n en l\u00ednea (ejemplo: Slack usa Node.js).</li> <li>Microservicios: Servicios modulares en arquitecturas distribuidas (ejemplo: Netflix).</li> <li>Streaming: Transmisi\u00f3n de video/audio (ejemplo: plataformas como Twitch).</li> <li>Herramientas CLI: Scripts de automatizaci\u00f3n o generadores de proyectos (ejemplo: Create React App).</li> </ul> <p>Limitaciones: No es ideal para tareas intensivas en CPU (como c\u00e1lculos cient\u00edficos), donde lenguajes como Python o C++ son m\u00e1s adecuados.</p>"},{"location":"content/p0/#2-instalacion-y-configuracion-del-entorno-nodejs-npm-vs-code","title":"2. Instalaci\u00f3n y Configuraci\u00f3n del Entorno (Node.js, npm, VS Code)","text":"<p>Explicaci\u00f3n: Configurar un entorno de desarrollo funcional es esencial para trabajar con Node.js. Esto incluye instalar Node.js (que viene con npm), configurar un editor de c\u00f3digo (VS Code) y preparar herramientas para pruebas (como Postman).</p> <p>Pasos:</p> <ol> <li> <p>Instalar Node.js y npm:  </p> <ul> <li>Descargar Node.js desde nodejs.org. Recomendado: versi\u00f3n LTS (Long-Term Support) para estabilidad.  </li> <li>Instalar siguiendo las instrucciones del sistema operativo (Windows, macOS, Linux).  </li> <li>Verificar instalaci\u00f3n: <pre><code>node -v  # Muestra la versi\u00f3n de Node.js (ejemplo: v20.x.x)\nnpm -v   # Muestra la versi\u00f3n de npm (ejemplo: 10.x.x)\n</code></pre></li> <li>npm es el gestor de paquetes incluido con Node.js, usado para instalar dependencias como Express.</li> </ul> </li> <li> <p>Configurar VS Code:  </p> <ul> <li>Descargar e instalar Visual Studio Code desde code.visualstudio.com.  </li> <li>Instalar extensiones recomendadas:  </li> <li>ESLint: Detecta errores en el c\u00f3digo JavaScript.  </li> <li>Prettier: Formatea el c\u00f3digo autom\u00e1ticamente.  </li> <li>JavaScript (ES6) Snippets: Atajos para escribir c\u00f3digo m\u00e1s r\u00e1pido.  </li> <li>Configurar un entorno de trabajo: crear una carpeta para el proyecto (ejemplo: <code>mi-api</code>).</li> </ul> </li> <li> <p>Instalar Postman:  </p> <ul> <li>Descargar Postman desde postman.com para probar endpoints de la API.  </li> <li>Postman permite enviar solicitudes HTTP (GET, POST, etc.) y visualizar respuestas JSON.</li> </ul> </li> <li> <p>Estructura inicial del proyecto: </p> <ul> <li>Crear una carpeta para el proyecto: <pre><code>mkdir mi-api\ncd mi-api\n</code></pre></li> <li>Inicializar un proyecto Node.js: <pre><code>npm init -y  # Crea un archivo package.json con valores predeterminados\n</code></pre></li> </ul> </li> </ol> <p>Nota: Asegurarse de tener una conexi\u00f3n a internet para descargar paquetes con npm.</p>"},{"location":"content/p0/#3-conceptos-de-apis-rest-metodos-http-codigos-de-estado-json","title":"3. Conceptos de APIs REST: M\u00e9todos HTTP, C\u00f3digos de Estado, JSON","text":"<p>Explicaci\u00f3n: Una API REST (Representational State Transfer) es un estilo arquitect\u00f3nico para dise\u00f1ar aplicaciones web que permite la comunicaci\u00f3n entre cliente (navegador, app m\u00f3vil) y servidor a trav\u00e9s de HTTP. Las APIs REST son stateless (sin estado), lo que significa que cada solicitud contiene toda la informaci\u00f3n necesaria para procesarla.</p>"},{"location":"content/p0/#componentes-clave","title":"Componentes Clave:","text":"<ol> <li> <p>M\u00e9todos HTTP:  </p> <ul> <li>Define la acci\u00f3n que se desea realizar sobre un recurso (como un usuario o producto).  </li> <li>Principales m\u00e9todos:         - GET: Obtener datos (ejemplo: listar productos).         - POST: Crear un nuevo recurso (ejemplo: registrar un usuario).         - PUT: Actualizar un recurso existente (ejemplo: modificar datos de un producto).         - DELETE: Eliminar un recurso (ejemplo: borrar un comentario).         - Otros: PATCH (actualizaci\u00f3n parcial), OPTIONS (consultar m\u00e9todos permitidos).</li> </ul> </li> <li> <p>C\u00f3digos de Estado HTTP: </p> <ul> <li>Indican el resultado de una solicitud.  </li> <li>Categor\u00edas principales:  </li> <li>2xx (\u00c9xito):         - 200 OK: Solicitud exitosa.         - 201 Created: Recurso creado correctamente.  </li> <li>4xx (Error del Cliente):         - 400 Bad Request: Solicitud mal formada.         - 404 Not Found: Recurso no encontrado.  </li> <li>5xx (Error del Servidor):         - 500 Internal Server Error: Error interno del servidor.  </li> <li>Ejemplo: Una solicitud GET a <code>/productos/123</code> devuelve 404 si el producto no existe.</li> </ul> </li> <li> <p>JSON (JavaScript Object Notation):  </p> <ul> <li>Formato est\u00e1ndar para enviar y recibir datos en APIs REST.  </li> <li>Estructura: Objetos <code>{}</code> y arreglos <code>[]</code> con pares clave-valor.  </li> <li>Ejemplo de respuesta JSON: <pre><code>{\n      \"id\": 1,\n      \"nombre\": \"Laptop\",\n      \"precio\": 999.99,\n      \"disponible\": true\n}\n</code></pre></li> <li>Ventajas: Ligero, legible y soportado por todos los lenguajes modernos.</li> </ul> </li> </ol> <p>Ejemplo de interacci\u00f3n REST: </p> <ul> <li>Solicitud: <code>GET /api/productos</code> \u2192 Respuesta: <code>200 OK</code> con una lista de productos en JSON.  </li> <li>Solicitud: <code>POST /api/usuarios</code> con un JSON \u2192 Respuesta: <code>201 Created</code> con el usuario creado.</li> </ul>"},{"location":"content/p0/#4-creacion-de-un-servidor-basico-con-nodejs-puro","title":"4. Creaci\u00f3n de un Servidor B\u00e1sico con Node.js Puro","text":"<p>Explicaci\u00f3n: Node.js incluye el m\u00f3dulo nativo <code>http</code> para crear servidores web sin dependencias externas. Esto permite entender c\u00f3mo funciona un servidor a bajo nivel antes de usar frameworks como Express.</p>"},{"location":"content/p0/#pasos-y-codigo","title":"Pasos y C\u00f3digo:","text":""},{"location":"content/p0/#1-crear-un-archivo-serverjs","title":"1. Crear un archivo <code>server.js</code>:","text":"<pre><code>const http = require('http');\n\nconst server = http.createServer((req, res) =&gt; {\n// Verificar si la ruta es '/' y el m\u00e9todo es GET\nif (req.url === '/' &amp;&amp; req.method === 'GET') {\n      res.writeHead(200, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({ message: 'Hola, mundo' }));\n} else {\n      res.writeHead(404, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({ error: 'Ruta no encontrada' }));\n}\n});\n\nserver.listen(3000, () =&gt; {\nconsole.log('Servidor corriendo en http://localhost:3000');\n});\n</code></pre>"},{"location":"content/p0/#2-explicacion-del-codigo","title":"2. Explicaci\u00f3n del c\u00f3digo:","text":"<ul> <li><code>http.createServer</code>: Crea un servidor que escucha solicitudes HTTP.  </li> <li><code>(req, res)</code>: <code>req</code> contiene informaci\u00f3n de la solicitud (URL, m\u00e9todo, headers); <code>res</code> permite enviar la respuesta.  </li> <li><code>res.writeHead</code>: Establece el c\u00f3digo de estado y los headers (como el tipo de contenido).  </li> <li><code>res.end</code>: Env\u00eda la respuesta al cliente (en este caso, un JSON).  </li> <li><code>server.listen(3000)</code>: Inicia el servidor en el puerto 3000.</li> </ul>"},{"location":"content/p0/#3-ejecutar-y-probar","title":"3. Ejecutar y probar:","text":"<ul> <li>Ejecutar: <code>node server.js</code>.  </li> <li>Abrir Postman o un navegador y enviar una solicitud GET a <code>http://localhost:3000</code>.  </li> <li>Respuesta esperada: <code>{ \"message\": \"Hola, mundo\" }</code>.  </li> <li>Probar una ruta inv\u00e1lida (ejemplo: <code>/test</code>): <code>{ \"error\": \"Ruta no encontrada\" }</code>.</li> </ul> <p>Limitaciones:  </p> <ul> <li>El m\u00f3dulo <code>http</code> es de bajo nivel y requiere manejar manualmente rutas, m\u00e9todos y respuestas.  </li> <li>Para proyectos reales, frameworks como Express simplifican estas tareas.</li> </ul>"},{"location":"content/p0/#5-ejemplo-de-uso-de-pdfkit-para-crear-un-pdf","title":"5. Ejemplo de Uso de pdfkit para Crear un PDF","text":"<p>pdfkit es una biblioteca de Node.js que permite crear documentos PDF de manera program\u00e1tica. Aqu\u00ed tienes un ejemplo b\u00e1sico de c\u00f3mo utilizar pdfkit para generar un PDF con datos de ejemplo:</p>"},{"location":"content/p0/#instalacion-de-pdfkit","title":"Instalaci\u00f3n de pdfkit:","text":"<pre><code>npm install pdfkit\n</code></pre>"},{"location":"content/p0/#codigo-de-ejemplo","title":"C\u00f3digo de Ejemplo:","text":"<p><pre><code>const PDFDocument = require('pdfkit');\nconst fs = require('fs');\n\n// Crear un nuevo documento PDF\nconst doc = new PDFDocument();\n\n// Guardar el PDF en un archivo\nconst stream = fs.createWriteStream('output.pdf');\ndoc.pipe(stream);\n\n// Agregar un t\u00edtulo\ndoc.fontSize(20).text('Reporte de Productos', { align: 'center' });\ndoc.moveDown(); // Espacio vertical\n\n// Agregar un p\u00e1rrafo\ndoc.fontSize(12).text('Este es un reporte generado con Node.js y pdfkit. A continuaci\u00f3n, se muestra una lista de productos disponibles:', { align: 'left' });\ndoc.moveDown();\n\n// Datos de ejemplo (productos)\nconst products = [\n  { nombre: 'Laptop', precio: 999.99, categoria: 'Electr\u00f3nica' },\n  { nombre: 'Libro', precio: 19.99, categoria: 'Educaci\u00f3n' },\n  { nombre: 'Auriculares', precio: 49.99, categoria: 'Accesorios' }\n];\n\n// Crear una tabla simple\ndoc.fontSize(14).text('Tabla de Productos', { underline: true });\ndoc.moveDown(0.5);\n\n// Encabezados de la tabla\ndoc.fontSize(10).text('Nombre', 100, doc.y, { continued: true });\ndoc.text('Precio', 250, doc.y, { continued: true });\ndoc.text('Categor\u00eda', 350, doc.y);\ndoc.moveDown(0.5);\n\n// Filas de la tabla\nproducts.forEach(product =&gt; {\n  doc.text(product.nombre, 100, doc.y, { continued: true });\n  doc.text(`$${product.precio.toFixed(2)}`, 250, doc.y, { continued: true });\n  doc.text(product.categoria, 350, doc.y);\n  doc.moveDown(0.5);\n});\n\n// Finalizar el documento\ndoc.end();\n\nconsole.log('Archivo PDF \"output.pdf\" creado exitosamente.');\n</code></pre> Explicaci\u00f3n:</p> <ul> <li><code>PDFDocument</code>: Clase de <code>pdfkit</code> para crear documentos PDF.</li> <li><code>fs</code>: M\u00f3dulo nativo de Node.js para trabajar con el sistema de archivos.</li> <li><code>createWriteStream</code>: Crea un flujo de escritura para guardar el PDF en un archivo.</li> <li><code>pipe</code>: Conecta el flujo de escritura con el documento PDF.</li> <li><code>fontSize</code>: Cambia el tama\u00f1o de fuente para el texto.</li> <li><code>text</code>: Agrega texto al documento.</li> <li><code>moveDown</code>: Mueve el cursor hacia abajo.</li> <li><code>forEach</code>: Itera sobre un array para agregar filas a la tabla.</li> <li><code>end</code>: Finaliza el documento PDF.</li> </ul>"},{"location":"content/p0/#actividad-practica-1-manipulacion-de-archivos-excel-con-nodejs-y-npm","title":"Actividad Pr\u00e1ctica 1: Manipulaci\u00f3n de Archivos Excel con Node.js y npm","text":"<p>Duraci\u00f3n: 1 hora Nivel: Principiante Objetivos:  </p> <ul> <li>Instalar y configurar un proyecto Node.js con dependencias npm.  </li> <li>Usar la librer\u00eda <code>xlsx</code> para leer y escribir archivos Excel.  </li> <li>Crear un archivo Excel desde datos en memoria y leer un archivo existente.  </li> <li>Comprender el manejo b\u00e1sico de archivos en Node.js.   </li> </ul>"},{"location":"content/p0/#contexto","title":"Contexto","text":"<p>En esta actividad, crear\u00e1s un proyecto Node.js que usa la librer\u00eda <code>xlsx</code> para:  </p> <ol> <li>Generar un archivo Excel con datos de estudiantes (nombre, edad, curso).  </li> <li>Leer un archivo Excel existente y mostrar su contenido en la consola.  </li> </ol> <p>La librer\u00eda <code>xlsx</code> es una herramienta popular para manipular archivos Excel (.xlsx) en Node.js, permitiendo leer, escribir y modificar hojas de c\u00e1lculo sin necesidad de instalar Microsoft Excel.</p> <p>Estructura del proyecto: <pre><code>excel-activity/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 input.xlsx  (opcional, para lectura)\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 output.xlsx  (generado por el script)\n</code></pre></p>"},{"location":"content/p0/#instrucciones-de-la-actividad","title":"Instrucciones de la Actividad","text":""},{"location":"content/p0/#parte-1-configuracion-del-entorno","title":"Parte 1: Configuraci\u00f3n del Entorno","text":"<ol> <li> <p>Crear el proyecto:  </p> <ul> <li>Crea una carpeta para la actividad: <pre><code>mkdir excel-activity\ncd excel-activity\n</code></pre></li> <li>Inicializa un proyecto Node.js: <pre><code>npm init -y\n</code></pre>   Esto genera un archivo <code>package.json</code> con la configuraci\u00f3n predeterminada.</li> </ul> </li> <li> <p>Instalar la dependencia <code>xlsx</code>:  </p> <ul> <li>Instala la librer\u00eda <code>xlsx</code> usando npm: <pre><code>npm install xlsx\n</code></pre></li> <li>Verifica que se cre\u00f3 la carpeta <code>node_modules</code> y que <code>xlsx</code> aparece en <code>dependencies</code> dentro de <code>package.json</code>.</li> </ul> </li> <li> <p>Configurar VS Code:  </p> <ul> <li>Abre la carpeta <code>excel-activity</code> en VS Code.  </li> <li>Crea un archivo <code>index.js</code> en la ra\u00edz del proyecto.  </li> <li>Opcional: Instala extensiones como ESLint y Prettier para mejor formato de c\u00f3digo.</li> </ul> </li> <li> <p>Crear una carpeta para datos:  </p> <ul> <li>Crea una subcarpeta <code>data</code>: <pre><code>mkdir data\n</code></pre></li> <li>(Opcional) Si deseas practicar la lectura, crea un archivo <code>input.xlsx</code> manualmente en la carpeta <code>data</code> con una hoja de c\u00e1lculo simple (por ejemplo, columnas: <code>Nombre</code>, <code>Edad</code>, <code>Curso</code>).</li> </ul> </li> </ol>"},{"location":"content/p0/#parte-2-crear-un-archivo-excel","title":"Parte 2: Crear un Archivo Excel","text":"<ol> <li> <p>Escribir el c\u00f3digo en <code>index.js</code>:       o- Abre <code>index.js</code> y agrega el siguiente c\u00f3digo para crear un archivo Excel con datos de estudiantes: <pre><code>const XLSX = require('xlsx');\n\n// Crear datos de ejemplo (array de objetos)\nconst students = [\n      { Nombre: 'Ana L\u00f3pez', Edad: 20, Curso: 'Matem\u00e1ticas' },\n      { Nombre: 'Juan P\u00e9rez', Edad: 22, Curso: 'Historia' },\n      { Nombre: 'Mar\u00eda G\u00f3mez', Edad: 19, Curso: 'Programaci\u00f3n' }\n];\n\n// Convertir los datos en una hoja de c\u00e1lculo\nconst worksheet = XLSX.utils.json_to_sheet(students);\n\n// Crear un nuevo libro de trabajo (workbook)\nconst workbook = XLSX.utils.book_new();\nXLSX.utils.book_append_sheet(workbook, worksheet, 'Estudiantes');\n\n// Guardar el archivo Excel\nXLSX.writeFile(workbook, 'output.xlsx');\n\nconsole.log('Archivo Excel \"output.xlsx\" creado exitosamente.');\n</code></pre></p> </li> <li> <p>Explicaci\u00f3n del c\u00f3digo:  </p> <ul> <li><code>require('xlsx')</code>: Importa la librer\u00eda <code>xlsx</code>.  </li> <li><code>students</code>: Un array de objetos que representa los datos a escribir.  </li> <li><code>XLSX.utils.json_to_sheet</code>: Convierte el array de objetos en una hoja de c\u00e1lculo.  </li> <li><code>XLSX.utils.book_new</code>: Crea un nuevo libro de trabajo (workbook).  </li> <li><code>XLSX.utils.book_append_sheet</code>: Agrega la hoja al libro con el nombre 'Estudiantes'.  </li> <li><code>XLSX.writeFile</code>: Guarda el libro como un archivo <code>.xlsx</code> en la carpeta del proyecto.</li> </ul> </li> <li> <p>Ejecutar el c\u00f3digo:  </p> <ul> <li>En la terminal, ejecuta: <pre><code>node index.js\n</code></pre></li> <li>Verifica que se cre\u00f3 el archivo <code>output.xlsx</code> en la carpeta del proyecto.  </li> <li>Abre <code>output.xlsx</code> con una aplicaci\u00f3n como Microsoft Excel, Google Sheets o LibreOffice Calc para confirmar que contiene los datos de los estudiantes.</li> </ul> </li> <li> <p>Tarea adicional:  </p> <ul> <li>Modifica el array <code>students</code> para agregar dos estudiantes m\u00e1s con datos diferentes.  </li> <li>Vuelve a ejecutar <code>node index.js</code> y verifica que el archivo <code>output.xlsx</code> se actualiz\u00f3.</li> </ul> </li> </ol>"},{"location":"content/p0/#parte-3-leer-un-archivo-excel","title":"Parte 3: Leer un Archivo Excel","text":"<ol> <li> <p>Preparar un archivo de entrada (opcional):  </p> <ul> <li>Si tienes un archivo <code>input.xlsx</code> en la carpeta <code>data</code>, aseg\u00farate de que tenga una hoja con columnas como <code>Nombre</code>, <code>Edad</code>, <code>Curso</code>.  </li> <li>Si no, usa el <code>output.xlsx</code> generado en la Parte 2 como entrada.</li> </ul> </li> <li> <p>Agregar c\u00f3digo para leer en <code>index.js</code>:  </p> <ul> <li>Modifica <code>index.js</code> para incluir la lectura del archivo Excel (agrega este c\u00f3digo despu\u00e9s del c\u00f3digo anterior): <pre><code>// Leer un archivo Excel existente\nconst inputFile = 'output.xlsx'; // Cambia a 'data/input.xlsx' si usas otro archivo\nconst workbookRead = XLSX.readFile(inputFile);\n\n// Obtener la primera hoja del archivo\nconst sheetName = workbookRead.SheetNames[0];\nconst worksheetRead = workbookRead.Sheets[sheetName];\n\n// Convertir la hoja a un array de objetos\nconst data = XLSX.utils.sheet_to_json(worksheetRead);\n\n// Mostrar los datos en la consola\nconsole.log('Contenido del archivo Excel:');\nconsole.log(data);\n</code></pre></li> </ul> </li> <li> <p>Explicaci\u00f3n del c\u00f3digo:  </p> <ul> <li><code>XLSX.readFile</code>: Lee el archivo Excel especificado.  </li> <li><code>workbookRead.SheetNames[0]</code>: Obtiene el nombre de la primera hoja.  </li> <li><code>XLSX.utils.sheet_to_json</code>: Convierte la hoja en un array de objetos.  </li> <li><code>console.log(data)</code>: Muestra los datos en la consola.</li> </ul> </li> <li> <p>Ejecutar y verificar:  </p> <ul> <li>Ejecuta: <code>node index.js</code>.  </li> <li>Verifica que la consola muestre los datos del archivo (ejemplo: <code>[{ Nombre: 'Ana L\u00f3pez', Edad: 20, Curso: 'Matem\u00e1ticas' }, ...]</code>).  </li> <li>Si usaste <code>input.xlsx</code>, aseg\u00farate de que el contenido coincida con lo esperado.</li> </ul> </li> </ol>"},{"location":"content/p0/#parte-4-entregables-y-reflexion","title":"Parte 4: Entregables y Reflexi\u00f3n","text":"<ol> <li> <p>Entregables:  </p> <ul> <li>Archivo <code>index.js</code> con el c\u00f3digo completo (creaci\u00f3n y lectura).  </li> <li>Archivo <code>output.xlsx</code> generado.  </li> <li>Captura de pantalla de la consola mostrando los datos le\u00eddos.  </li> <li>(Opcional) Archivo <code>input.xlsx</code> si creaste uno propio.</li> </ul> </li> <li> <p>Preguntas de reflexi\u00f3n (responde en un documento o en comentarios en <code>index.js</code>):  </p> <ul> <li>\u00bfQu\u00e9 comando usaste para instalar la librer\u00eda <code>xlsx</code>?  </li> <li>\u00bfQu\u00e9 funci\u00f3n de <code>xlsx</code> convierte un array de objetos en una hoja de c\u00e1lculo?  </li> <li>\u00bfQu\u00e9 observaste al abrir <code>output.xlsx</code> en una aplicaci\u00f3n de hojas de c\u00e1lculo?  </li> <li>\u00bfC\u00f3mo podr\u00edas usar esta funcionalidad en un proyecto real (por ejemplo, para exportar datos de una aplicaci\u00f3n)?</li> </ul> </li> </ol>"},{"location":"content/p0/#actividad-practica-2-metodos-http-con-postman-y-mockoon-playground","title":"Actividad Pr\u00e1ctica 2: M\u00e9todos HTTP con Postman y Mockoon Playground","text":"<p>Objetivos: </p> <ul> <li>Practicar el uso de m\u00e9todos HTTP (GET, POST, PUT, DELETE) en una API REST.  </li> <li>Configurar y usar Postman para enviar solicitudes HTTP.  </li> <li>Interactuar con el Mockoon Playground para simular operaciones CRUD en una API real.  </li> <li>Analizar respuestas HTTP, incluyendo c\u00f3digos de estado y datos JSON.  </li> </ul>"},{"location":"content/p0/#contexto_1","title":"Contexto","text":"<p>El Mockoon Playground es una API mock p\u00fablica que proporciona endpoints con datos falsos para simular operaciones CRUD (Create, Read, Update, Delete). En esta actividad, usar\u00e1s el recurso <code>/users</code> del Playground para practicar los m\u00e9todos HTTP. Cada solicitud se enviar\u00e1 a trav\u00e9s de Postman, y analizar\u00e1s las respuestas para entender c\u00f3mo funcionan las APIs REST.</p> <p>Base URL del Mockoon Playground: <code>https://playground.mockoon.com</code> Recurso principal: <code>/users</code> (contiene datos de usuarios ficticios con campos como <code>id</code>, <code>name</code>, <code>email</code>).  </p> <p>Notas importantes:  </p> <ul> <li>El Playground aplica l\u00edmites de tasa (puedes recibir un error 429 \"Too Many Requests\" si excedes el uso).  </li> <li>Los datos se resetean peri\u00f3dicamente o tras 15 minutos de inactividad.  </li> <li>Usa Postman para organizar y guardar tus solicitudes en una colecci\u00f3n.  </li> </ul>"},{"location":"content/p0/#instrucciones-de-la-actividad_1","title":"Instrucciones de la Actividad","text":""},{"location":"content/p0/#parte-1-configuracion-del-entorno_1","title":"Parte 1: Configuraci\u00f3n del Entorno","text":"<ol> <li>Instalar y configurar Postman:  </li> <li>Descarga e instala Postman desde postman.com si no lo tienes.  </li> <li>Abre Postman y crea una nueva colecci\u00f3n llamada <code>Mockoon Playground Practice</code>:  <ul> <li>Clic en Collections \u2192 New Collection \u2192 N\u00f3mbrala \u2192 Create.  </li> </ul> </li> <li> <p>Esta colecci\u00f3n almacenar\u00e1 todas las solicitudes de la actividad.</p> </li> <li> <p>Explorar el Mockoon Playground:  </p> </li> <li>Visita playground.mockoon.com y revisa la documentaci\u00f3n.  </li> <li> <p>Familiar\u00edzate con el recurso <code>/users</code>, que soporta:  </p> <ul> <li><code>GET /users</code>: Lista todos los usuarios.  </li> <li><code>GET /users/{id}</code>: Obtiene un usuario por ID.  </li> <li><code>POST /users</code>: Crea un nuevo usuario.  </li> <li><code>PUT /users/{id}</code>: Actualiza un usuario existente.  </li> <li><code>DELETE /users/{id}</code>: Elimina un usuario.  </li> </ul> </li> <li> <p>Preparar Postman:  </p> </li> <li>Crea una nueva solicitud en la colecci\u00f3n:  <ul> <li>Clic en New \u2192 Request \u2192 N\u00f3mbrala (ejemplo: <code>GET Users</code>) \u2192 Guardar en <code>Mockoon Playground Practice</code>.  </li> </ul> </li> <li>Configura la URL base: <code>https://playground.mockoon.com</code>.</li> </ol>"},{"location":"content/p0/#parte-2-practica-con-metodos-http","title":"Parte 2: Pr\u00e1ctica con M\u00e9todos HTTP","text":"<p>Realiza las siguientes tareas en Postman, enviando solicitudes al recurso <code>/users</code> del Mockoon Playground. Guarda cada solicitud en la colecci\u00f3n y anota los c\u00f3digos de estado y las respuestas.</p>"},{"location":"content/p0/#tarea-1-get-listar-todos-los-usuarios","title":"Tarea 1: GET - Listar Todos los Usuarios","text":"<ul> <li>Objetivo: Obtener la lista completa de usuarios.  </li> <li>Instrucciones:  </li> <li>Crea una nueva solicitud en Postman:  <ul> <li>M\u00e9todo: GET.  </li> <li>URL: <code>https://playground.mockoon.com/users</code>.  </li> <li>Guarda como <code>GET All Users</code>.  </li> </ul> </li> <li>Env\u00eda la solicitud (clic en Send).  </li> <li>Analiza la respuesta:  <ul> <li>C\u00f3digo de estado esperado: <code>200 OK</code>.  </li> <li>Respuesta: Un arreglo JSON con m\u00faltiples usuarios (ejemplo: <code>[{ \"id\": 1, \"name\": \"Gudrun Rempel\", \"email\": \"Gudrun_Rempel@gmail.com\" }, ...]</code>).  </li> </ul> </li> <li>Tarea adicional: Copia el <code>id</code> de un usuario para usarlo en las siguientes tareas.  </li> </ul>"},{"location":"content/p0/#tarea-2-get-obtener-un-usuario-especifico","title":"Tarea 2: GET - Obtener un Usuario Espec\u00edfico","text":"<ul> <li>Objetivo: Obtener los detalles de un usuario por su ID.  </li> <li>Instrucciones:  </li> <li>Crea una nueva solicitud:  <ul> <li>M\u00e9todo: GET.  </li> <li>URL: <code>https://playground.mockoon.com/users/{id}</code> (reemplaza <code>{id}</code> con el ID copiado, ejemplo: <code>https://playground.mockoon.com/users/1</code>).  </li> <li>Guarda como <code>GET User by ID</code>.  </li> </ul> </li> <li>Env\u00eda la solicitud.  </li> <li>Analiza la respuesta:  <ul> <li>C\u00f3digo de estado esperado: <code>200 OK</code>.  </li> <li>Respuesta: Un objeto JSON con los datos del usuario (ejemplo: <code>{ \"id\": 1, \"name\": \"Gudrun Rempel\", \"email\": \"Gudrun_Rempel@gmail.com\" }</code>).  </li> </ul> </li> <li>Tarea adicional: Intenta con un ID inv\u00e1lido (ejemplo: <code>999</code>).  <ul> <li>C\u00f3digo de estado esperado: <code>404 Not Found</code>.  </li> <li>Respuesta: <code>{ \"error\": \"Not found\" }</code>.  </li> </ul> </li> </ul>"},{"location":"content/p0/#tarea-3-post-crear-un-nuevo-usuario","title":"Tarea 3: POST - Crear un Nuevo Usuario","text":"<ul> <li>Objetivo: Crear un nuevo usuario enviando datos JSON.  </li> <li>Instrucciones:  </li> <li>Crea una nueva solicitud:  <ul> <li>M\u00e9todo: POST.  </li> <li>URL: <code>https://playground.mockoon.com/users</code>.  </li> <li>En la pesta\u00f1a Body, selecciona raw \u2192 JSON y escribe: <pre><code>{\n  \"id\": 4,\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\"\n}\n</code></pre></li> <li>Guarda como <code>POST Create User</code>.  </li> </ul> </li> <li>Env\u00eda la solicitud.  </li> <li>Analiza la respuesta:  <ul> <li>C\u00f3digo de estado esperado: <code>201 Created</code>.  </li> <li>Respuesta: El usuario creado (ejemplo: <code>{ \"id\": 4, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\" }</code>).  </li> </ul> </li> <li>Tarea adicional: Verifica que el usuario se cre\u00f3 enviando un <code>GET /users</code> y buscando el nuevo usuario en la lista.  </li> </ul>"},{"location":"content/p0/#tarea-4-put-actualizar-un-usuario","title":"Tarea 4: PUT - Actualizar un Usuario","text":"<ul> <li>Objetivo: Actualizar los datos de un usuario existente.  </li> <li>Instrucciones:  </li> <li>Crea una nueva solicitud:  <ul> <li>M\u00e9todo: PUT.  </li> <li>URL: <code>https://playground.mockoon.com/users/4</code> (usa el ID del usuario creado).  </li> <li>En la pesta\u00f1a Body, selecciona raw \u2192 JSON y escribe: <pre><code>{\n  \"id\": 4,\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane.doe@example.com\"\n}\n</code></pre></li> <li>Guarda como <code>PUT Update User</code>.  </li> </ul> </li> <li>Env\u00eda la solicitud.  </li> <li>Analiza la respuesta:  <ul> <li>C\u00f3digo de estado esperado: <code>200 OK</code>.  </li> <li>Respuesta: El usuario actualizado (ejemplo: <code>{ \"id\": 4, \"name\": \"Jane Doe\", \"email\": \"jane.doe@example.com\" }</code>).  </li> </ul> </li> <li>Tarea adicional: Verifica la actualizaci\u00f3n con un <code>GET /users/4</code>.  </li> </ul>"},{"location":"content/p0/#tarea-5-delete-eliminar-un-usuario","title":"Tarea 5: DELETE - Eliminar un Usuario","text":"<ul> <li>Objetivo: Eliminar un usuario por su ID.  </li> <li>Instrucciones:  </li> <li>Crea una nueva solicitud:  <ul> <li>M\u00e9todo: DELETE.  </li> <li>URL: <code>https://playground.mockoon.com/users/4</code>.  </li> <li>No se requiere cuerpo (body).  </li> <li>Guarda como <code>DELETE User</code>.  </li> </ul> </li> <li>Env\u00eda la solicitud.  </li> <li>Analiza la respuesta:  <ul> <li>C\u00f3digo de estado esperado: <code>200 OK</code> o <code>204 No Content</code>.  </li> <li>Respuesta: Puede ser vac\u00eda o confirmar la eliminaci\u00f3n.  </li> </ul> </li> <li>Tarea adicional: Verifica que el usuario fue eliminado enviando un <code>GET /users/4</code>.  <ul> <li>C\u00f3digo de estado esperado: <code>404 Not Found</code>.  </li> </ul> </li> </ul>"},{"location":"content/p0/#tutorial-instalar-y-usar-prompt-sync-en-nodejs","title":"Tutorial: Instalar y usar <code>prompt-sync</code> en Node.js","text":""},{"location":"content/p0/#paso-1-requisitos-previos","title":"Paso 1: Requisitos previos","text":"<p>Aseg\u00farate de tener instalado: - Node.js en tu computadora. Puedes descargarlo desde nodejs.org si no lo tienes. - Un editor de c\u00f3digo como Visual Studio Code, Sublime Text o cualquier otro. - Una terminal (puede ser la terminal integrada en tu editor o una externa como CMD, PowerShell o Bash).</p>"},{"location":"content/p0/#paso-2-crear-un-proyecto-nodejs","title":"Paso 2: Crear un proyecto Node.js","text":"<ol> <li>Crea una carpeta para tu proyecto:    <pre><code>mkdir mi-proyecto\ncd mi-proyecto\n</code></pre></li> <li>Inicializa un proyecto Node.js ejecutando:    <pre><code>npm init -y\n</code></pre>    Esto crear\u00e1 un archivo <code>package.json</code> con la configuraci\u00f3n predeterminada.</li> </ol>"},{"location":"content/p0/#paso-3-instalar-prompt-sync","title":"Paso 3: Instalar <code>prompt-sync</code>","text":"<ol> <li>En la terminal, dentro de la carpeta de tu proyecto, ejecuta el siguiente comando para instalar el m\u00f3dulo <code>prompt-sync</code>:    <pre><code>npm install prompt-sync\n</code></pre>    Esto descargar\u00e1 e instalar\u00e1 el m\u00f3dulo en la carpeta <code>node_modules</code> y lo a\u00f1adir\u00e1 como dependencia en tu <code>package.json</code>.</li> </ol>"},{"location":"content/p0/#paso-4-crear-un-archivo-para-usar-prompt-sync","title":"Paso 4: Crear un archivo para usar <code>prompt-sync</code>","text":"<ol> <li>Crea un archivo JavaScript, por ejemplo, <code>index.js</code>:    <pre><code>touch index.js\n</code></pre></li> <li>Abre <code>index.js</code> en tu editor de c\u00f3digo y escribe el siguiente ejemplo:</li> </ol> <pre><code>// Importar el m\u00f3dulo prompt-sync\nconst prompt = require('prompt-sync')();\n\n// Solicitar entrada al usuario\nconst nombre = prompt('\u00bfCu\u00e1l es tu nombre? ');\nconsole.log(`\u00a1Hola, ${nombre}!`);\n\n// Solicitar un n\u00famero\nconst edad = prompt('\u00bfCu\u00e1l es tu edad? ');\nconsole.log(`Tienes ${edad} a\u00f1os.`);\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo:    - <code>require('prompt-sync')()</code> importa el m\u00f3dulo y lo inicializa para usar la entrada s\u00edncrona.    - <code>prompt('Pregunta')</code> muestra un mensaje en la consola y espera que el usuario ingrese un valor, que se almacena en una variable.    - La entrada siempre se recibe como una cadena de texto (string). Si necesitas un n\u00famero, deber\u00e1s convertirlo (por ejemplo, con <code>parseInt()</code> o <code>parseFloat()</code>).</p>"},{"location":"content/p0/#paso-5-ejecutar-el-programa","title":"Paso 5: Ejecutar el programa","text":"<ol> <li>Guarda el archivo <code>index.js</code>.</li> <li>En la terminal, ejecuta el programa con:    <pre><code>node index.js\n</code></pre></li> <li>Ver\u00e1s que el programa te pide que ingreses tu nombre y edad, y luego muestra un mensaje con los valores ingresados.</li> </ol>"},{"location":"content/p0/#paso-6-ejemplo-avanzado","title":"Paso 6: Ejemplo avanzado","text":"<p>Si quieres manejar n\u00fameros o entradas m\u00e1s complejas, aqu\u00ed tienes un ejemplo m\u00e1s avanzado:</p> <pre><code>const prompt = require('prompt-sync')();\n\n// Solicitar dos n\u00fameros y sumarlos\nconst num1 = parseFloat(prompt('Ingresa el primer n\u00famero: '));\nconst num2 = parseFloat(prompt('Ingresa el segundo n\u00famero: '));\n\nconst suma = num1 + num2;\nconsole.log(`La suma de ${num1} y ${num2} es: ${suma}`);\n</code></pre> <p>Notas: - <code>parseFloat()</code> convierte la entrada (que es un string) en un n\u00famero decimal. - Si necesitas enteros, usa <code>parseInt()</code> en lugar de <code>parseFloat()</code>.</p>"},{"location":"content/p0/#paso-7-solucion-de-problemas-comunes","title":"Paso 7: Soluci\u00f3n de problemas comunes","text":"<ol> <li>Error: \"prompt-sync no encontrado\"</li> <li>Aseg\u00farate de haber ejecutado <code>npm install prompt-sync</code>.</li> <li>Verifica que est\u00e1s ejecutando <code>node index.js</code> desde la carpeta correcta donde est\u00e1 <code>node_modules</code>.</li> <li>Entrada no v\u00e1lida</li> <li>Si esperas n\u00fameros, usa <code>parseInt()</code> o <code>parseFloat()</code> para convertir las entradas.</li> <li>Puedes agregar validaciones, como:      <pre><code>const numero = parseFloat(prompt('Ingresa un n\u00famero: '));\nif (isNaN(numero)) {\n  console.log('Por favor, ingresa un n\u00famero v\u00e1lido.');\n} else {\n  console.log(`N\u00famero ingresado: ${numero}`);\n}\n</code></pre></li> </ol>"},{"location":"content/p0/#paso-8-opcional-actualizar-o-desinstalar","title":"Paso 8: Opcional - Actualizar o desinstalar","text":"<ul> <li>Actualizar <code>prompt-sync</code>:   <pre><code>npm update prompt-sync\n</code></pre></li> <li>Desinstalar <code>prompt-sync</code>:   <pre><code>npm uninstall prompt-sync\n</code></pre></li> </ul>"},{"location":"content/p1/","title":"Tutorial B\u00e1sico de Express y NestJS para Crear APIs en Node.js","text":"<p>Este tutorial introduce Express y NestJS, dos frameworks de Node.js para construir APIs. Express es ligero y flexible, ideal para proyectos simples, mientras que NestJS ofrece una estructura robusta con TypeScript para aplicaciones escalables.</p>"},{"location":"content/p1/#1-express-framework-ligero-para-nodejs","title":"1. Express: Framework Ligero para Node.js","text":""},{"location":"content/p1/#11-que-es-express","title":"1.1. \u00bfQu\u00e9 es Express?","text":"<p>Express es un framework minimalista para Node.js que simplifica la creaci\u00f3n de servidores web y APIs mediante rutas, middlewares y manejo de solicitudes HTTP.</p>"},{"location":"content/p1/#12-configuracion-inicial","title":"1.2. Configuraci\u00f3n Inicial","text":"<ol> <li>Crear un proyecto:</li> <li>Crea una carpeta e inicializa un proyecto Node.js:      <pre><code>mkdir mi-proyecto-express\ncd mi-proyecto-express\nnpm init -y\n</code></pre></li> <li>Instalar Express:      <pre><code>npm install express\n</code></pre></li> </ol>"},{"location":"content/p1/#13-crear-un-servidor-basico","title":"1.3. Crear un Servidor B\u00e1sico","text":"<p>Crea un archivo <code>index.js</code>: <pre><code>const express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.get('/', (req, res) =&gt; {\n  res.send('\u00a1Hola, mundo desde Express!');\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Servidor corriendo en http://localhost:${PORT}`);\n});\n</code></pre></p> <ul> <li>Explicaci\u00f3n:</li> <li><code>express()</code> crea una instancia de la aplicaci\u00f3n.</li> <li><code>app.get('/')</code> define una ruta GET para la ra\u00edz.</li> <li><code>res.send()</code> env\u00eda una respuesta al cliente.</li> <li><code>app.listen()</code> inicia el servidor.</li> </ul>"},{"location":"content/p1/#14-ejecutar-el-servidor","title":"1.4. Ejecutar el Servidor","text":"<p>Corre: <pre><code>node index.js\n</code></pre> Visita <code>http://localhost:3000</code> para ver \"\u00a1Hola, mundo desde Express!\".</p>"},{"location":"content/p1/#15-agregar-mas-rutas","title":"1.5. Agregar M\u00e1s Rutas","text":"<p>Modifica <code>index.js</code>: <pre><code>const express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.get('/', (req, res) =&gt; {\n  res.send('\u00a1Hola, mundo desde Express!');\n});\n\napp.get('/about', (req, res) =&gt; {\n  res.send('P\u00e1gina Sobre Nosotros');\n});\n\napp.get('/user/:id', (req, res) =&gt; {\n  res.send(`Usuario con ID: ${req.params.id}`);\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Servidor corriendo en http://localhost:${PORT}`);\n});\n</code></pre></p> <ul> <li>Explicaci\u00f3n:</li> <li><code>/about</code>: Ruta est\u00e1tica.</li> <li><code>/user/:id</code>: Ruta din\u00e1mica que captura el par\u00e1metro <code>id</code>.</li> </ul> <p>Prueba: - <code>http://localhost:3000/about</code> \u2192 \"P\u00e1gina Sobre Nosotros\" - <code>http://localhost:3000/user/123</code> \u2192 \"Usuario con ID: 123\"</p>"},{"location":"content/p1/#2-nestjs-framework-escalable-para-nodejs","title":"2. NestJS: Framework Escalable para Node.js","text":""},{"location":"content/p1/#21-que-es-nestjs","title":"2.1. \u00bfQu\u00e9 es NestJS?","text":"<p>NestJS es un framework para construir aplicaciones backend escalables en Node.js. Usa TypeScript, soporta Express (o Fastify) y est\u00e1 inspirado en Angular para una arquitectura estructurada.</p>"},{"location":"content/p1/#22-instalacion","title":"2.2. Instalaci\u00f3n","text":"<ol> <li>Aseg\u00farate de tener Node.js (versi\u00f3n 16+) y npm.</li> <li>Instala el CLI de NestJS:    <pre><code>npm install -g @nestjs/cli\n</code></pre></li> <li>Crea un proyecto:    <pre><code>nest new mi-proyecto\n</code></pre>    Selecciona tu gestor de paquetes (npm o yarn).</li> <li>Ejecuta el proyecto:    <pre><code>cd mi-proyecto\nnpm run start:dev\n</code></pre>    La app corre en <code>http://localhost:3000</code>.</li> </ol>"},{"location":"content/p1/#23-estructura-basica","title":"2.3. Estructura B\u00e1sica","text":"<p>Un proyecto NestJS incluye: <pre><code>mi-proyecto/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app.controller.ts    # Controlador principal\n\u2502   \u251c\u2500\u2500 app.module.ts       # M\u00f3dulo ra\u00edz\n\u2502   \u251c\u2500\u2500 app.service.ts      # Servicio principal\n\u2502   \u251c\u2500\u2500 main.ts             # Punto de entrada\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n</code></pre></p> <ul> <li>Controladores: Manejan solicitudes HTTP.</li> <li>Servicios: Contienen l\u00f3gica de negocio.</li> <li>M\u00f3dulos: Agrupan componentes.</li> </ul>"},{"location":"content/p1/#24-crear-una-api-de-tareas","title":"2.4. Crear una API de Tareas","text":"<ol> <li> <p>Generar un m\u00f3dulo:    <pre><code>nest generate module tasks\n</code></pre>    Crea <code>src/tasks/tasks.module.ts</code>.</p> </li> <li> <p>Generar un controlador:    <pre><code>nest generate controller tasks\n</code></pre>    Edita <code>src/tasks/tasks.controller.ts</code>:    <pre><code>import { Controller, Get, Post, Body } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\n\n@Controller('tasks')\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  @Get()\n  getTasks(): string[] {\n    return this.tasksService.getTasks();\n  }\n\n  @Post()\n  createTask(@Body('name') name: string): string {\n    return this.tasksService.createTask(name);\n  }\n}\n</code></pre></p> </li> <li> <p>Generar un servicio:    <pre><code>nest generate service tasks\n</code></pre>    Edita <code>src/tasks/tasks.service.ts</code>:    <pre><code>import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class TasksService {\n  private tasks: string[] = [];\n\n  getTasks(): string[] {\n    return this.tasks;\n  }\n\n  createTask(name: string): string {\n    this.tasks.push(name);\n    return `Tarea ${name} creada`;\n  }\n}\n</code></pre></p> </li> <li> <p>Verifica <code>src/tasks/tasks.module.ts</code>:    <pre><code>import { Module } from '@nestjs/common';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n</code></pre></p> </li> </ol>"},{"location":"content/p1/#25-probar-la-api","title":"2.5. Probar la API","text":"<p>Con el servidor corriendo (<code>npm run start:dev</code>), prueba:</p> <ul> <li>GET <code>http://localhost:3000/tasks</code>: Lista de tareas.</li> <li>POST <code>http://localhost:3000/tasks</code> con JSON <code>{ \"name\": \"Comprar leche\" }</code>:   <pre><code>curl -X POST http://localhost:3000/tasks -H \"Content-Type: application/json\" -d '{\"name\":\"Comprar leche\"}'\n</code></pre></li> </ul>"},{"location":"content/p1/#26-resolucion-de-errores-desactivacion-de-la-regla-prettierprettier","title":"2.6. Resoluci\u00f3n de Errores: Desactivaci\u00f3n de la Regla prettier/prettier","text":"<p>Modificar archivo (<code>eslint.config.mjs</code>),:</p> <pre><code>// @ts-check\nimport eslint from '@eslint/js';\nimport eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';\nimport globals from 'globals';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  {\n    ignores: ['eslint.config.mjs'],\n  },\n  eslint.configs.recommended,\n  ...tseslint.configs.recommendedTypeChecked,\n  eslintPluginPrettierRecommended,\n  {\n    languageOptions: {\n      globals: {\n        ...globals.node,\n        ...globals.jest,\n      },\n      sourceType: 'commonjs',\n      parserOptions: {\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n  {\n    rules: {\n      '@typescript-eslint/no-explicit-any': 'off',\n      '@typescript-eslint/no-floating-promises': 'warn',\n      '@typescript-eslint/no-unsafe-argument': 'warn',\n      'prettier/prettier': 'off'\n    },\n  },\n);\n</code></pre>"},{"location":"content/p1/#3-conclusion","title":"3. Conclusi\u00f3n","text":"<ul> <li>Express: Ideal para APIs r\u00e1pidas y minimalistas.</li> <li>NestJS: Perfecto para proyectos escalables con TypeScript y arquitectura modular.</li> </ul> <p>Explora middlewares en Express o m\u00f3dulos/servicios en NestJS para agregar funcionalidades como autenticaci\u00f3n o conexi\u00f3n a bases de datos.</p>"},{"location":"content/p1/#actividad-para-estudiantes-crear-una-api-basica-con-nestjs","title":"Actividad para Estudiantes: Crear una API B\u00e1sica con NestJS","text":"<p>Enunciado: Desarrollar APIs con Node.js, su tarea es crear una aplicaci\u00f3n usando NestJS que implemente una API simple para gestionar una lista de libros, permitiendo obtener la lista de libros (GET) y agregar un nuevo libro (POST). Sigan las indicaciones a continuaci\u00f3n, bas\u00e1ndose en los ejemplos del tutorial.</p>"},{"location":"content/p1/#indicaciones","title":"Indicaciones","text":"<ol> <li>Configurar el proyecto:</li> <li>Aseg\u00farate de tener el CLI de NestJS instalado:      <pre><code>npm install -g @nestjs/cli\n</code></pre></li> <li>Crea un nuevo proyecto con:      <pre><code>nest new mi-proyecto-libros-nest\n</code></pre>      Selecciona npm como gestor de paquetes.</li> <li> <p>Navega al directorio del proyecto:      <pre><code>cd mi-proyecto-libros-nest\n</code></pre></p> </li> <li> <p>Crear un m\u00f3dulo, controlador y servicio:</p> </li> <li>Genera un m\u00f3dulo <code>books</code>:      <pre><code>nest generate module books\n</code></pre></li> <li>Genera un controlador <code>books</code>:      <pre><code>nest generate controller books\n</code></pre></li> <li> <p>Genera un servicio <code>books</code>:      <pre><code>nest generate service books\n</code></pre></p> </li> <li> <p>Implementar la API de libros:</p> </li> <li>En el servicio (<code>src/books/books.service.ts</code>):<ul> <li>Crea un arreglo privado para almacenar libros (ejemplo: <code>private books: string[] = [];</code>).</li> <li>Implementa un m\u00e9todo <code>getBooks(): string[]</code> que devuelva la lista de libros.</li> <li>Implementa un m\u00e9todo <code>addBook(title: string): string</code> que a\u00f1ada un t\u00edtulo a la lista y devuelva un mensaje como \"Libro [t\u00edtulo] agregado\".</li> </ul> </li> <li>En el controlador (<code>src/books/books.controller.ts</code>):<ul> <li>Agrega una ruta GET <code>/books</code> que llame al m\u00e9todo <code>getBooks()</code> del servicio y devuelva la lista de libros.</li> <li>Agrega una ruta POST <code>/books</code> que reciba un cuerpo JSON con el campo <code>title</code> (usa <code>@Body('title')</code>) y llame al m\u00e9todo <code>addBook()</code> del servicio.</li> </ul> </li> <li> <p>Aseg\u00farate de que el m\u00f3dulo <code>BooksModule</code> (<code>src/books/books.module.ts</code>) incluya el controlador y el servicio.</p> </li> <li> <p>Probar la API:</p> </li> <li>Ejecuta el proyecto:      <pre><code>npm run start:dev\n</code></pre></li> <li>Usa Postman o <code>curl</code> para probar:<ul> <li>GET <code>http://localhost:3000/books</code>: Debe mostrar la lista de libros.</li> <li>POST <code>http://localhost:3000/books</code> con un cuerpo JSON (ejemplo: <code>{ \"title\": \"Cien A\u00f1os de Soledad\" }</code>).</li> <li>Ejemplo con <code>curl</code>:    <pre><code>curl -X POST http://localhost:3000/books -H \"Content-Type: application/json\" -d '{\"title\":\"Cien A\u00f1os de Soledad\"}'\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/p1/#entregables","title":"Entregables","text":"<ul> <li>C\u00f3digo fuente de la aplicaci\u00f3n NestJS (archivos <code>books.module.ts</code>, <code>books.controller.ts</code>, <code>books.service.ts</code>).</li> <li>Repositorio de GitHub del proyecto.</li> </ul>"},{"location":"content/p2/","title":"Arquitectura de un Proyecto NestJS","text":"<p>NestJS es un framework que fomenta una arquitectura modular, escalable y mantenible, siguiendo principios de dise\u00f1o como la inyecci\u00f3n de dependencias, el patr\u00f3n modular y la separaci\u00f3n de preocupaciones. A continuaci\u00f3n, se describe la estructura t\u00edpica de un proyecto NestJS, sus componentes principales y c\u00f3mo interact\u00faan.</p>"},{"location":"content/p2/#1-estructura-de-carpetas","title":"1. Estructura de Carpetas","text":"<p>Un proyecto NestJS generado con el CLI (<code>nest new nombre-proyecto</code>) sigue una estructura de carpetas bien definida:</p> <pre><code>src/\n\u251c\u2500\u2500 main.ts                   # Punto de entrada de la aplicaci\u00f3n\n\u251c\u2500\u2500 app.module.ts             # M\u00f3dulo ra\u00edz de la aplicaci\u00f3n\n\u251c\u2500\u2500 app.controller.ts         # Controlador principal (ejemplo)\n\u251c\u2500\u2500 app.service.ts            # Servicio principal (ejemplo)\n\u251c\u2500\u2500 modules/                  # M\u00f3dulos adicionales\n\u2502   \u251c\u2500\u2500 users/                # Ejemplo de m\u00f3dulo \"users\"\n\u2502   \u2502   \u251c\u2500\u2500 users.module.ts\n\u2502   \u2502   \u251c\u2500\u2500 users.controller.ts\n\u2502   \u2502   \u251c\u2500\u2500 users.service.ts\n\u2502   \u2502   \u251c\u2500\u2500 dto/              # Data Transfer Objects\n\u2502   \u2502   \u251c\u2500\u2500 entities/         # Entidades (para ORM como TypeORM)\n\u2502   \u2502   \u2514\u2500\u2500 interfaces/       # Interfaces o tipos\n\u251c\u2500\u2500 common/                   # Utilidades compartidas\n\u2502   \u251c\u2500\u2500 filters/\n\u2502   \u251c\u2500\u2500 guards/\n\u2502   \u251c\u2500\u2500 interceptors/\n\u2502   \u2514\u2500\u2500 pipes/\n\u2514\u2500\u2500 config/                   # Configuraciones (e.g., base de datos, variables de entorno)\n</code></pre> <ul> <li><code>main.ts</code>: Archivo que inicializa la aplicaci\u00f3n, crea una instancia del m\u00f3dulo ra\u00edz (<code>AppModule</code>) y configura el servidor (por ejemplo, Express o Fastify).</li> <li><code>app.module.ts</code>: M\u00f3dulo ra\u00edz que define los controladores, servicios y m\u00f3dulos que componen la aplicaci\u00f3n.</li> <li>M\u00f3dulos espec\u00edficos: Carpetas como <code>users</code> agrupan l\u00f3gica relacionada (controladores, servicios, etc.) para una funcionalidad espec\u00edfica.</li> </ul>"},{"location":"content/p2/#2-componentes-principales","title":"2. Componentes Principales","text":""},{"location":"content/p2/#a-modulos","title":"a. M\u00f3dulos","text":"<p>Los m\u00f3dulos son la base de la arquitectura de NestJS. Cada m\u00f3dulo agrupa un conjunto de funcionalidades relacionadas y se define con el decorador <code>@Module()</code>. Un m\u00f3dulo t\u00edpico incluye:</p> <ul> <li>Controllers: Manejan las solicitudes HTTP.</li> <li>Providers: Servicios, repositorios u otros componentes inyectables.</li> <li>Imports: Otros m\u00f3dulos necesarios.</li> <li>Exports: Componentes que el m\u00f3dulo comparte con otros.</li> </ul> <p>Ejemplo de un m\u00f3dulo:</p> <pre><code>import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n</code></pre>"},{"location":"content/p2/#b-controladores","title":"b. Controladores","text":"<p>Los controladores manejan las solicitudes HTTP entrantes y devuelven respuestas al cliente. Se definen con el decorador <code>@Controller()</code> y contienen m\u00e9todos decorados con <code>@Get()</code>, <code>@Post()</code>, etc.</p> <p>Ejemplo:</p> <pre><code>import { Controller, Get } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n}\n</code></pre>"},{"location":"content/p2/#c-servicios-providers","title":"c. Servicios (Providers)","text":"<p>Los servicios contienen la l\u00f3gica de negocio y son inyectados en controladores u otros servicios mediante la inyecci\u00f3n de dependencias. Se definen con el decorador <code>@Injectable()</code>.</p> <p>Ejemplo:</p> <pre><code>import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService {\n  private readonly users = [{ id: 1, name: 'John Doe' }];\n\n  findAll() {\n    return this.users;\n  }\n}\n</code></pre>"},{"location":"content/p2/#d-dtos-data-transfer-objects","title":"d. DTOs (Data Transfer Objects)","text":"<p>Los DTOs definen la estructura de los datos enviados o recibidos en las solicitudes. Se utilizan con librer\u00edas como <code>class-validator</code> para validar los datos entrantes.</p> <p>Ejemplo:</p> <pre><code>import { IsString, IsInt } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  name: string;\n\n  @IsInt()\n  age: number;\n}\n</code></pre>"},{"location":"content/p2/#e-entidades","title":"e. Entidades","text":"<p>Las entidades representan las tablas de la base de datos cuando se utiliza un ORM (como TypeORM o Sequelize). Se definen en la carpeta <code>entities</code>.</p> <p>Ejemplo con TypeORM:</p> <pre><code>import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n}\n</code></pre>"},{"location":"content/p2/#f-middleware-guards-interceptors-y-pipes","title":"f. Middleware, Guards, Interceptors y Pipes","text":"<ul> <li>Middleware: Procesa solicitudes antes de que lleguen a los controladores (e.g., logging).</li> <li>Guards: Controla el acceso a rutas seg\u00fan condiciones (e.g., autenticaci\u00f3n).</li> <li>Interceptors: Modifica las solicitudes o respuestas (e.g., transformaci\u00f3n de datos).</li> <li>Pipes: Valida o transforma los datos entrantes (e.g., validaci\u00f3n con DTOs).</li> </ul>"},{"location":"content/p2/#3-flujo-de-una-solicitud","title":"3. Flujo de una Solicitud","text":"<ol> <li>Solicitud HTTP: Llega al servidor (Express/Fastify).</li> <li>Middleware: Procesa la solicitud (e.g., autenticaci\u00f3n).</li> <li>Controlador: La solicitud es dirigida al m\u00e9todo correspondiente seg\u00fan la ruta.</li> <li>Servicio: El controlador invoca un servicio para ejecutar la l\u00f3gica de negocio.</li> <li>Base de datos: El servicio interact\u00faa con la base de datos (si es necesario) a trav\u00e9s de un repositorio o ORM.</li> <li>Respuesta: El controlador devuelve la respuesta al cliente.</li> </ol>"},{"location":"content/p2/#4-principios-de-diseno","title":"4. Principios de Dise\u00f1o","text":"<ul> <li>Modularidad: Cada m\u00f3dulo encapsula una funcionalidad espec\u00edfica, facilitando la escalabilidad.</li> <li>Inyecci\u00f3n de Dependencias: NestJS usa un contenedor de IoC (Inversion of Control) para gestionar dependencias.</li> <li>Escalabilidad: La arquitectura permite agregar nuevos m\u00f3dulos sin afectar los existentes.</li> <li>Testabilidad: Los servicios y controladores son f\u00e1cilmente testeables gracias a la inyecci\u00f3n de dependencias.</li> </ul>"},{"location":"content/p2/#5-ejemplo-de-configuracion","title":"5. Ejemplo de Configuraci\u00f3n","text":"<p>Un proyecto t\u00edpico incluye configuraciones para:</p> <ul> <li>Base de datos: Conexi\u00f3n a bases de datos (e.g., PostgreSQL con TypeORM).</li> <li>Variables de entorno: Uso de <code>@nestjs/config</code> para cargar variables desde un archivo <code>.env</code>.</li> <li>Documentaci\u00f3n: Integraci\u00f3n con Swagger (<code>@nestjs/swagger</code>) para generar documentaci\u00f3n de la API.</li> </ul> <p>Ejemplo de <code>main.ts</code> con configuraciones:</p> <pre><code>import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  // Configuraci\u00f3n de Swagger\n  const config = new DocumentBuilder()\n    .setTitle('API de Ejemplo')\n    .setDescription('Documentaci\u00f3n de la API')\n    .setVersion('1.0')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n\n  await app.listen(3000);\n}\nbootstrap();\n</code></pre>"},{"location":"content/p2/#6-ventajas-de-la-arquitectura","title":"6. Ventajas de la Arquitectura","text":"<ul> <li>Estructura clara: Facilita el mantenimiento y la colaboraci\u00f3n en equipo.</li> <li>Escalabilidad: Ideal para aplicaciones grandes y complejas.</li> <li>Soporte para TypeScript: Mejora la tipificaci\u00f3n y reduce errores.</li> <li>Integraci\u00f3n con herramientas: Soporta ORMs, WebSockets, microservicios, etc.</li> </ul>"},{"location":"content/p2/#guia-paso-a-paso-aplicacion-basica-con-nestjs-prisma-y-mysql","title":"Gu\u00eda paso a paso: Aplicaci\u00f3n b\u00e1sica con NestJS, Prisma y MySQL","text":""},{"location":"content/p2/#prerrequisitos","title":"Prerrequisitos","text":"<ul> <li>Node.js (versi\u00f3n 18 o superior) instalado.</li> <li>MySQL instalado y corriendo localmente o en un servidor.</li> <li>Una base de datos MySQL creada (por ejemplo, <code>nest_prisma_db</code>).</li> <li>npm o yarn como gestor de paquetes.</li> </ul>"},{"location":"content/p2/#paso-1-crear-el-proyecto-nestjs","title":"Paso 1: Crear el proyecto NestJS","text":"<ol> <li>Instala el CLI de NestJS globalmente:    <pre><code>npm install -g @nestjs/cli\n</code></pre></li> <li>Crea un nuevo proyecto:    <pre><code>nest new nestjs-prisma-mysql\ncd nestjs-prisma-mysql\n</code></pre></li> <li>Selecciona <code>npm</code> (o tu gestor preferido) cuando se te solicite.</li> </ol>"},{"location":"content/p2/#paso-2-instalar-dependencias-de-prisma","title":"Paso 2: Instalar dependencias de Prisma","text":"<ol> <li>Instala Prisma CLI y el cliente de Prisma:    <pre><code>npm install prisma @prisma/client --save\nnpm install @nestjs/config --save\n</code></pre></li> <li>Inicializa Prisma en el proyecto:    <pre><code>npx prisma init\n</code></pre>    Esto crea un directorio <code>prisma</code> con un archivo <code>schema.prisma</code> y agrega un archivo <code>.env</code>.</li> </ol>"},{"location":"content/p2/#paso-3-configurar-la-conexion-a-mysql","title":"Paso 3: Configurar la conexi\u00f3n a MySQL","text":"<ol> <li> <p>Edita el archivo <code>.env</code> para configurar la conexi\u00f3n a MySQL:    <pre><code>DATABASE_URL=\"mysql://usuario:contrase\u00f1a@localhost:3306/nest_prisma_db\"\n</code></pre>    Reemplaza <code>usuario</code>, <code>contrase\u00f1a</code>, y <code>nest_prisma_db</code> con tus credenciales y nombre de la base de datos.</p> </li> <li> <p>Configura el archivo <code>prisma/schema.prisma</code>:    <pre><code>generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  createdAt DateTime @default(now())\n}\n</code></pre></p> </li> </ol>"},{"location":"content/p2/#paso-4-generar-el-cliente-de-prisma","title":"Paso 4: Generar el cliente de Prisma","text":"<ol> <li> <p>Ejecuta la migraci\u00f3n para crear la tabla en la base de datos:    <pre><code>npx prisma migrate dev --name init\n</code></pre>    Esto sincroniza el esquema con la base de datos y genera el cliente de Prisma.</p> </li> <li> <p>Instala el cliente de Prisma:    <pre><code>npm install @prisma/client\n</code></pre></p> </li> </ol>"},{"location":"content/p2/#paso-5-configurar-nestjs-para-usar-prisma","title":"Paso 5: Configurar NestJS para usar Prisma","text":"<ol> <li> <p>Crea un servicio para manejar la l\u00f3gica de Prisma:    <pre><code>nest generate service prisma\n</code></pre>    Esto genera <code>src/prisma/prisma.service.ts</code>.</p> </li> <li> <p>Edita <code>src/prisma/prisma.service.ts</code>:    <pre><code>import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  constructor() {\n    super();\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n</code></pre></p> </li> <li> <p>Configura el m\u00f3dulo principal (<code>src/app.module.ts</code>):    <pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaService } from './prisma/prisma.service';\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [UserModule],\n  controllers: [AppController],\n  providers: [AppService, PrismaService],\n})\nexport class AppModule {}\n</code></pre></p> </li> </ol>"},{"location":"content/p2/#paso-6-crear-el-modulo-de-user","title":"Paso 6: Crear el m\u00f3dulo de <code>User</code>","text":"<ol> <li> <p>Genera un m\u00f3dulo, controlador y servicio para <code>User</code>:    <pre><code>nest generate module user\nnest generate controller user\nnest generate service user\n</code></pre></p> </li> <li> <p>Edita <code>src/user/user.service.ts</code>:    <pre><code>import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { User, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async createUser(data: Prisma.UserCreateInput): Promise&lt;User&gt; {\n    return this.prisma.user.create({ data });\n  }\n\n  async getUsers(): Promise&lt;User[]&gt; {\n    return this.prisma.user.findMany();\n  }\n\n  async getUserById(id: number): Promise&lt;User | null&gt; {\n    return this.prisma.user.findUnique({ where: { id } });\n  }\n\n  async updateUser(id: number, data: Prisma.UserUpdateInput): Promise&lt;User&gt; {\n    return this.prisma.user.update({ where: { id }, data });\n  }\n\n  async deleteUser(id: number): Promise&lt;User&gt; {\n    return this.prisma.user.delete({ where: { id } });\n  }\n}\n</code></pre></p> </li> <li> <p>Edita <code>src/user/user.controller.ts</code>:    <pre><code>import { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User, Prisma } from '@prisma/client';\n\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  async createUser(@Body() data: Prisma.UserCreateInput): Promise&lt;User&gt; {\n    return this.userService.createUser(data);\n  }\n\n  @Get()\n  async getUsers(): Promise&lt;User[]&gt; {\n    return this.userService.getUsers();\n  }\n\n  @Get(':id')\n  async getUserById(@Param('id') id: string): Promise&lt;User | null&gt; {\n    return this.userService.getUserById(parseInt(id));\n  }\n\n  @Put(':id')\n  async updateUser(@Param('id') id: string, @Body() data: Prisma.UserUpdateInput): Promise&lt;User&gt; {\n    return this.userService.updateUser(parseInt(id), data);\n  }\n\n  @Delete(':id')\n  async deleteUser(@Param('id') id: string): Promise&lt;User&gt; {\n    return this.userService.deleteUser(parseInt(id));\n  }\n}\n</code></pre></p> </li> <li> <p>Configura <code>src/user/user.module.ts</code>:    <pre><code>import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService, PrismaService],\n})\nexport class UserModule {}\n</code></pre></p> </li> </ol>"},{"location":"content/p2/#paso-7-probar-la-aplicacion","title":"Paso 7: Probar la aplicaci\u00f3n","text":"<ol> <li>Inicia el servidor de NestJS:    <pre><code>npm run start:dev\n</code></pre></li> <li>Usa un cliente como Postman o cURL para probar los endpoints:</li> <li>Crear usuario:      <pre><code>curl -X POST http://localhost:3000/users -H \"Content-Type: application/json\" -d '{\"email\": \"test@example.com\", \"name\": \"Test User\"}'\n</code></pre></li> <li>Obtener todos los usuarios:      <pre><code>curl http://localhost:3000/users\n</code></pre></li> <li>Obtener usuario por ID:      <pre><code>curl http://localhost:3000/users/1\n</code></pre></li> <li>Actualizar usuario:      <pre><code>curl -X PUT http://localhost:3000/users/1 -H \"Content-Type: application/json\" -d '{\"name\": \"Updated Name\"}'\n</code></pre></li> <li>Eliminar usuario:      <pre><code>curl -X DELETE http://localhost:3000/users/1\n</code></pre></li> </ol>"},{"location":"content/p2/#notas-adicionales","title":"Notas adicionales","text":"<ul> <li>Aseg\u00farate de que el servidor MySQL est\u00e9 corriendo y la base de datos est\u00e9 accesible.</li> <li>Puedes usar <code>npx prisma studio</code> para explorar la base de datos visualmente.</li> <li>Para producci\u00f3n, configura variables de entorno seguras y considera agregar validaci\u00f3n de datos con <code>@nestjs/class-validator</code>.</li> </ul>"},{"location":"content/p2/#actividad-de-consulta-conceptos-de-nestjs-prisma-y-mysql","title":"Actividad de Consulta: Conceptos de NestJS, Prisma y MySQL","text":"<p>Esta actividad contiene 16 preguntas generales dise\u00f1adas para evaluar y reforzar los conceptos aplicados en la creaci\u00f3n de una aplicaci\u00f3n b\u00e1sica con NestJS, Prisma y MySQL. Responde cada pregunta de forma clara y concisa.</p>"},{"location":"content/p2/#conceptos-de-nestjs","title":"Conceptos de NestJS","text":"<ol> <li>\u00bfQu\u00e9 es NestJS y qu\u00e9 paradigma de programaci\u00f3n utiliza principalmente?</li> <li>\u00bfCu\u00e1l es la funci\u00f3n del CLI de NestJS (<code>@nestjs/cli</code>) en el desarrollo de aplicaciones?</li> <li>\u00bfQu\u00e9 son los m\u00f3dulos en NestJS y por qu\u00e9 son importantes?</li> <li>Explica la diferencia entre un controlador (<code>Controller</code>) y un servicio (<code>Service</code>) en NestJS.</li> <li>\u00bfQu\u00e9 es el archivo <code>app.module.ts</code> y qu\u00e9 contiene t\u00edpicamente?</li> <li>\u00bfC\u00f3mo se puede configurar un puerto diferente para una aplicaci\u00f3n NestJS?</li> </ol>"},{"location":"content/p2/#conceptos-de-prisma","title":"Conceptos de Prisma","text":"<ol> <li>\u00bfQu\u00e9 es Prisma y qu\u00e9 rol cumple en una aplicaci\u00f3n con base de datos?</li> <li>\u00bfQu\u00e9 es el archivo <code>schema.prisma</code> y qu\u00e9 secciones principales contiene?</li> <li>Explica el prop\u00f3sito del generador (<code>generator</code>) en el archivo <code>schema.prisma</code>.</li> <li>\u00bfQu\u00e9 hace el comando <code>npx prisma migrate dev</code> y cu\u00e1ndo se utiliza?</li> <li>\u00bfQu\u00e9 es el cliente de Prisma y c\u00f3mo se integra en una aplicaci\u00f3n NestJS?</li> <li>\u00bfC\u00f3mo se define un modelo en Prisma? Proporciona un ejemplo simple.</li> </ol>"},{"location":"content/p2/#conceptos-de-mysql","title":"Conceptos de MySQL","text":"<ol> <li>\u00bfQu\u00e9 es MySQL y qu\u00e9 tipo de base de datos es?</li> <li>\u00bfC\u00f3mo se configura la conexi\u00f3n a una base de datos MySQL en Prisma?</li> <li>\u00bfQu\u00e9 es una migraci\u00f3n en el contexto de bases de datos y c\u00f3mo la maneja Prisma?</li> <li>\u00bfQu\u00e9 representa la variable <code>DATABASE_URL</code> en el archivo <code>.env</code>?</li> </ol>"},{"location":"content/p2s/","title":"Soluci\u00f3n: Actividad de Consulta sobre Conceptos de NestJS, Prisma y MySQL","text":"<p>A continuaci\u00f3n, se presentan las respuestas a las 16 preguntas de la actividad de consulta, explicando los conceptos aplicados en la creaci\u00f3n de una aplicaci\u00f3n b\u00e1sica con NestJS, Prisma y MySQL.</p>"},{"location":"content/p2s/#respuestas","title":"Respuestas","text":""},{"location":"content/p2s/#conceptos-de-nestjs","title":"Conceptos de NestJS","text":"<ol> <li> <p>\u00bfQu\u00e9 es NestJS y qu\u00e9 paradigma de programaci\u00f3n utiliza principalmente?    NestJS es un framework para construir aplicaciones del lado del servidor en Node.js, basado en TypeScript. Utiliza principalmente el paradigma de programaci\u00f3n orientada a objetos y conceptos de arquitectura modular, inspirados en Angular. Combina elementos de programaci\u00f3n funcional y reactiva para manejar solicitudes HTTP.</p> </li> <li> <p>\u00bfCu\u00e1l es la funci\u00f3n del CLI de NestJS (<code>@nestjs/cli</code>) en el desarrollo de aplicaciones?    El CLI de NestJS es una herramienta que automatiza tareas como la creaci\u00f3n de proyectos, m\u00f3dulos, controladores y servicios. Facilita la generaci\u00f3n de c\u00f3digo boilerplate con comandos como <code>nest new</code> o <code>nest generate</code>. Tambi\u00e9n soporta compilaci\u00f3n y ejecuci\u00f3n de aplicaciones.</p> </li> <li> <p>\u00bfQu\u00e9 son los m\u00f3dulos en NestJS y por qu\u00e9 son importantes?    Los m\u00f3dulos en NestJS son unidades organizativas que agrupan controladores, servicios y otros componentes relacionados. Son importantes porque promueven la modularidad, facilitan la escalabilidad y permiten una estructura clara. Cada m\u00f3dulo se define con el decorador <code>@Module()</code>.</p> </li> <li> <p>Explica la diferencia entre un controlador (<code>Controller</code>) y un servicio (<code>Service</code>) en NestJS.    Un controlador (<code>Controller</code>) maneja las solicitudes HTTP, define rutas y delega la l\u00f3gica a los servicios. Un servicio (<code>Service</code>) contiene la l\u00f3gica de negocio, como operaciones con la base de datos, y es reutilizable. Por ejemplo, en el ejercicio, <code>UserController</code> maneja rutas como <code>/users</code>, mientras que <code>UserService</code> interact\u00faa con Prisma.</p> </li> <li> <p>\u00bfQu\u00e9 es el archivo <code>app.module.ts</code> y qu\u00e9 contiene t\u00edpicamente?    El archivo <code>app.module.ts</code> es el m\u00f3dulo ra\u00edz de una aplicaci\u00f3n NestJS. T\u00edpicamente contiene el decorador <code>@Module()</code> que define los imports (otros m\u00f3dulos), controladores, proveedores (como servicios) y exportaciones. En el ejercicio, incluye <code>UserModule</code> y <code>PrismaService</code>.</p> </li> <li> <p>\u00bfC\u00f3mo se puede configurar un puerto diferente para una aplicaci\u00f3n NestJS?    Para cambiar el puerto, se modifica el m\u00e9todo <code>listen</code> en <code>main.ts</code>. Por ejemplo: <code>app.listen(3001)</code> cambia el puerto a 3001. Tambi\u00e9n se puede usar una variable de entorno con <code>@nestjs/config</code>.</p> </li> </ol>"},{"location":"content/p2s/#conceptos-de-prisma","title":"Conceptos de Prisma","text":"<ol> <li> <p>\u00bfQu\u00e9 es Prisma y qu\u00e9 rol cumple en una aplicaci\u00f3n con base de datos?    Prisma es un ORM (Object-Relational Mapping) que simplifica la interacci\u00f3n con bases de datos. Proporciona un cliente tipado para realizar consultas y administrar esquemas. En el ejercicio, Prisma conecta NestJS con MySQL para operaciones CRUD.</p> </li> <li> <p>\u00bfQu\u00e9 es el archivo <code>schema.prisma</code> y qu\u00e9 secciones principales contiene?    El archivo <code>schema.prisma</code> define el esquema de la base de datos. Contiene secciones como <code>datasource</code> (configuraci\u00f3n de la base de datos), <code>generator</code> (configuraci\u00f3n del cliente Prisma) y modelos (definiciones de tablas). En el ejercicio, incluye el modelo <code>User</code>.</p> </li> <li> <p>Explica el prop\u00f3sito del generador (<code>generator</code>) en el archivo <code>schema.prisma</code>.    El generador en <code>schema.prisma</code> configura c\u00f3mo se genera el cliente de Prisma. Especifica el proveedor (<code>prisma-client-js</code>) y opciones como la ubicaci\u00f3n del c\u00f3digo generado. En el ejercicio, genera el cliente para interactuar con MySQL.</p> </li> <li> <p>\u00bfQu\u00e9 hace el comando <code>npx prisma migrate dev</code> y cu\u00e1ndo se utiliza?    El comando <code>npx prisma migrate dev</code> crea y aplica migraciones a la base de datos basadas en los cambios en <code>schema.prisma</code>. Sincroniza el esquema con la base de datos y genera el cliente Prisma. Se usa durante el desarrollo, como en el ejercicio para crear la tabla <code>User</code>.</p> </li> <li> <p>\u00bfQu\u00e9 es el cliente de Prisma y c\u00f3mo se integra en una aplicaci\u00f3n NestJS?    El cliente de Prisma es una biblioteca generada que proporciona m\u00e9todos tipados para interactuar con la base de datos. En NestJS, se integra mediante un servicio como <code>PrismaService</code>, que se inyecta en otros servicios o controladores, como en el ejercicio con <code>UserService</code>.</p> </li> <li> <p>\u00bfC\u00f3mo se define un modelo en Prisma? Proporciona un ejemplo simple.    Un modelo en Prisma se define en <code>schema.prisma</code> con campos, tipos y atributos. Ejemplo: <pre><code>model User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n}\n</code></pre>    Esto crea una tabla <code>User</code> con columnas <code>id</code>, <code>email</code> y <code>name</code>.</p> </li> </ol>"},{"location":"content/p2s/#conceptos-de-mysql","title":"Conceptos de MySQL","text":"<ol> <li> <p>\u00bfQu\u00e9 es MySQL y qu\u00e9 tipo de base de datos es?    MySQL es un sistema de gesti\u00f3n de bases de datos relacional (RDBMS) de c\u00f3digo abierto. Almacena datos en tablas con relaciones definidas por claves primarias y for\u00e1neas. En el ejercicio, se usa para almacenar datos de usuarios.</p> </li> <li> <p>\u00bfC\u00f3mo se configura la conexi\u00f3n a una base de datos MySQL en Prisma?    La conexi\u00f3n se configura en <code>schema.prisma</code> con la secci\u00f3n <code>datasource</code> y la variable <code>DATABASE_URL</code> en <code>.env</code>. Ejemplo: <code>DATABASE_URL=\"mysql://user:password@localhost:3306/db\"</code>. En el ejercicio, se conecta a <code>nest_prisma_db</code>.</p> </li> <li> <p>\u00bfQu\u00e9 es una migraci\u00f3n en el contexto de bases de datos y c\u00f3mo la maneja Prisma?    Una migraci\u00f3n es el proceso de aplicar cambios al esquema de la base de datos, como crear tablas. Prisma genera scripts SQL basados en <code>schema.prisma</code> y los aplica con <code>prisma migrate dev</code>. En el ejercicio, crea la tabla <code>User</code>.</p> </li> <li> <p>\u00bfQu\u00e9 representa la variable <code>DATABASE_URL</code> en el archivo <code>.env</code>?    La variable <code>DATABASE_URL</code> especifica los par\u00e1metros de conexi\u00f3n a la base de datos, incluyendo el protocolo, usuario, contrase\u00f1a, host, puerto y nombre de la base de datos. En el ejercicio, es <code>mysql://usuario:contrase\u00f1a@localhost:3306/nest_prisma_db</code>. Prisma la usa para conectar con MySQL.</p> </li> </ol>"},{"location":"content/p3/","title":"Controladores en NestJS","text":""},{"location":"content/p3/#1-que-son-los-controladores-en-nestjs","title":"1. \u00bfQu\u00e9 son los controladores en NestJS?","text":"<p>Los controladores en NestJS son clases decoradas con <code>@Controller</code> que manejan solicitudes HTTP entrantes (GET, POST, etc.) y devuelven respuestas al cliente. Son la capa de presentaci\u00f3n, delegando la l\u00f3gica de negocio a servicios.</p> <p>Caracter\u00edsticas principales:</p> <ul> <li>Definen rutas (por ejemplo, <code>/products</code>) y manejan verbos HTTP.</li> <li>Usan decoradores para capturar datos de la solicitud (par\u00e1metros, cuerpo, query).</li> <li>Integran inyecci\u00f3n de dependencias para usar servicios.</li> <li>Gestionan respuestas autom\u00e1ticas o personalizadas.</li> </ul>"},{"location":"content/p3/#2-creacion-de-un-controlador","title":"2. Creaci\u00f3n de un controlador","text":"<p>Usa el Nest CLI para generar un controlador:</p> <pre><code>nest generate controller products\n</code></pre> <p>Esto crea <code>src/products/products.controller.ts</code>.</p> <p>Ejemplo b\u00e1sico: <pre><code>import { Controller, Get } from '@nestjs/common';\n\n@Controller('products')\nexport class ProductsController {\n  @Get()\n  findAll() {\n    return ['Product 1', 'Product 2'];\n  }\n}\n</code></pre></p> <p>Explicaci\u00f3n:</p> <ul> <li><code>@Controller('products')</code>: Establece la ruta base <code>/products</code>.</li> <li><code>@Get()</code>: Maneja solicitudes GET a <code>/products</code>, devolviendo un array que NestJS convierte en JSON.</li> </ul>"},{"location":"content/p3/#3-decoradores-de-rutas","title":"3. Decoradores de rutas","text":"<p>Los decoradores asocian m\u00e9todos a verbos HTTP:</p> Decorador Verbo HTTP Ruta de ejemplo <code>@Get()</code> GET <code>/products</code> <code>@Post()</code> POST <code>/products</code> <code>@Put()</code> PUT <code>/products/:id</code> <code>@Delete()</code> DELETE <code>/products/:id</code> <p>Ejemplo: <pre><code>import { Controller, Get, Post, Put, Delete } from '@nestjs/common';\n\n@Controller('products')\nexport class ProductsController {\n  @Get()\n  findAll() {\n    return { message: 'All products' };\n  }\n\n  @Post()\n  create() {\n    return { message: 'Product created' };\n  }\n\n  @Put(':id')\n  update() {\n    return { message: 'Product updated' };\n  }\n\n  @Delete(':id')\n  remove() {\n    return { message: 'Product deleted' };\n  }\n}\n</code></pre></p> <p>Explicaci\u00f3n:</p> <ul> <li>Cada decorador define una acci\u00f3n HTTP para la ruta especificada (por ejemplo, <code>@Put(':id')</code> para <code>/products/1</code>).</li> </ul>"},{"location":"content/p3/#4-manejo-de-parametros","title":"4. Manejo de par\u00e1metros","text":"<p>Usa decoradores para capturar datos de la solicitud:</p> Decorador Uso Ejemplo <code>@Param()</code> Par\u00e1metros de ruta <code>@Param('id') id: string</code> <code>@Body()</code> Cuerpo de la solicitud <code>@Body() data: CreateProductDto</code> <code>@Query()</code> Par\u00e1metros de consulta <code>@Query('sort') sort: string</code> <p>Ejemplo: <pre><code>import { Controller, Get, Post, Body, Param, Query } from '@nestjs/common';\n\n@Controller('products')\nexport class ProductsController {\n  @Get(':id')\n  findOne(@Param('id') id: string, @Query('format') format: string) {\n    return { id, format };\n  }\n\n  @Post()\n  create(@Body() body: { name: string; price: number }) {\n    return { message: 'Product created', data: body };\n  }\n}\n</code></pre></p> <p>Explicaci\u00f3n:</p> <ul> <li><code>@Param('id')</code>: Captura <code>:id</code> de la ruta (por ejemplo, <code>/products/1</code>).</li> <li><code>@Query('format')</code>: Captura <code>format</code> de la URL (por ejemplo, <code>?format=json</code>).</li> <li><code>@Body()</code>: Captura el cuerpo JSON de la solicitud.</li> </ul>"},{"location":"content/p3/#validacion-con-dto-y-pipes","title":"Validaci\u00f3n con DTO y pipes","text":"<p>Usa DTOs con <code>class-validator</code> para validar el cuerpo y pipes para par\u00e1metros.</p> <p>Ejemplo con DTO: <pre><code>import { IsString, IsNumber, Min } from 'class-validator';\n\nexport class CreateProductDto {\n  @IsString()\n  name: string;\n\n  @IsNumber()\n  @Min(0)\n  price: number;\n}\n</code></pre></p> <pre><code>import { Controller, Post, Body, Get, Param, ParseIntPipe } from '@nestjs/common';\nimport { CreateProductDto } from './dto/create-product.dto';\n\n@Controller('products')\nexport class ProductsController {\n  @Post()\n  create(@Body() createProductDto: CreateProductDto) {\n    return { message: 'Product created', data: createProductDto };\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return { id };\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>CreateProductDto</code> valida que <code>name</code> sea una cadena y <code>price</code> un n\u00famero no negativo.</li> <li><code>ParseIntPipe</code> convierte <code>:id</code> a n\u00famero y lanza un error 400 si no es v\u00e1lido.</li> <li>Habilita la validaci\u00f3n global en <code>main.ts</code>: <pre><code>import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(3000);\n}\nbootstrap();\n</code></pre></li> </ul>"},{"location":"content/p3/#5-manejo-de-respuestas-y-excepciones","title":"5. Manejo de respuestas y excepciones","text":"<p>NestJS convierte autom\u00e1ticamente los valores devueltos en respuestas JSON y asigna c\u00f3digos de estado (200 para GET, 201 para POST, etc.). Puedes lanzar excepciones HTTP para errores.</p> <p>Ejemplo: <pre><code>import { Controller, Get, Param, NotFoundException, HttpCode } from '@nestjs/common';\n\n@Controller('products')\nexport class ProductsController {\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const product = null; // Simula consulta a DB\n    if (!product) {\n      throw new NotFoundException(`Product ${id} not found`);\n    }\n    return product;\n  }\n\n  @Get()\n  @HttpCode(202)\n  findAll() {\n    return { message: 'All products' };\n  }\n}\n</code></pre></p> <p>Explicaci\u00f3n:</p> <ul> <li><code>NotFoundException</code>: Genera una respuesta 404 si el producto no se encuentra.</li> <li><code>@HttpCode(202)</code>: Cambia el c\u00f3digo de estado a 202 en lugar de 200.</li> </ul>"},{"location":"content/p3/#6-inyeccion-de-dependencias","title":"6. Inyecci\u00f3n de dependencias","text":"<p>Los controladores inyectan servicios para delegar l\u00f3gica de negocio.</p> <p>Ejemplo: <pre><code>import { Controller, Get } from '@nestjs/common';\nimport { ProductsService } from './products.service';\n\n@Controller('products')\nexport class ProductsController {\n  constructor(private readonly productsService: ProductsService) {}\n\n  @Get()\n  findAll() {\n    return this.productsService.findAll();\n  }\n}\n</code></pre></p> <pre><code>import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ProductsService {\n  findAll() {\n    return ['Product 1', 'Product 2'];\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>El servicio se inyecta mediante el constructor, y NestJS lo resuelve autom\u00e1ticamente.</li> </ul>"},{"location":"content/p3/#7-guards-e-interceptors","title":"7. Guards e interceptors","text":"<p>Usa <code>@UseGuards</code> y <code>@UseInterceptors</code> para aplicar guards o interceptors.</p> <p>Ejemplo con guard: <pre><code>import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from './guards/auth.guard';\n\n@Controller('products')\n@UseGuards(AuthGuard)\nexport class ProductsController {\n  @Get()\n  findAll() {\n    return ['Product 1', 'Product 2'];\n  }\n}\n</code></pre></p> <pre><code>import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    return request.headers['authorization'] === 'Bearer my-token';\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>@UseGuards(AuthGuard)</code>: Protege las rutas, permitiendo solo solicitudes con la cabecera <code>Authorization: Bearer my-token</code>.</li> </ul>"},{"location":"content/p3/#actividad-crear-un-controlador-basico-para-gestionar-peliculas-en-nestjs","title":"Actividad: Crear un controlador b\u00e1sico para gestionar pel\u00edculas en NestJS","text":"<p>Enunciado Como desarrolladores principiantes en NestJS, su tarea es crear un controlador para gestionar una colecci\u00f3n de pel\u00edculas en una aplicaci\u00f3n de servidor. El controlador debe manejar solicitudes HTTP b\u00e1sicas (GET, POST, PUT, DELETE) y permitir acceder a par\u00e1metros de ruta y datos del cuerpo de la solicitud. La actividad se centra en los conceptos fundamentales de controladores, rutas y manejo de par\u00e1metros, sin usar servicios ni DTOs, y siguiendo las indicaciones vistas en los puntos 1 al 4 del tutorial sobre controladores en NestJS.</p> <p>Objetivo Implementar un controlador en NestJS que gestione un recurso de pel\u00edculas con rutas para listar, obtener, crear, actualizar y eliminar pel\u00edculas, utilizando decoradores de rutas y par\u00e1metros.</p> <p>Indicaciones </p> <ol> <li>Modelo: El recurso a manejar es pel\u00edculas (movies). Cada pel\u00edcula tiene un <code>id</code> (n\u00famero), <code>title</code> (cadena) y <code>year</code> (n\u00famero). No se usar\u00e1 una base de datos; en su lugar, simulen los datos con un array en memoria dentro del controlador.</li> <li> <p>Requisitos del controlador:</p> <ul> <li>Crear una clase <code>MoviesController</code> decorada con <code>@Controller('movies')</code> para definir la ruta base <code>/movies</code>.</li> <li> <p>Implementar las siguientes rutas usando los decoradores HTTP correspondientes:</p> <ul> <li>GET /movies: Devuelve la lista completa de pel\u00edculas.</li> <li>GET /movies/:id: Devuelve una pel\u00edcula espec\u00edfica seg\u00fan su ID. Si no existe, devolver un mensaje de error simple (sin usar excepciones como <code>NotFoundException</code>).</li> <li>POST /movies: Crea una nueva pel\u00edcula a partir de los datos enviados en el cuerpo de la solicitud (t\u00edtulo y a\u00f1o).</li> <li>PUT /movies/:id: Actualiza una pel\u00edcula existente seg\u00fan su ID, usando los datos del cuerpo.</li> <li>DELETE /movies/:id: Elimina una pel\u00edcula seg\u00fan su ID.</li> </ul> </li> <li> <p>Usar <code>@Param()</code> para capturar el par\u00e1metro <code>id</code> de la ruta.</p> </li> <li>Usar <code>@Body()</code> para capturar los datos del cuerpo en las rutas POST y PUT.</li> <li>Usar <code>@Query()</code> para agregar un par\u00e1metro de consulta opcional en la ruta GET /movies que permita filtrar pel\u00edculas por a\u00f1o (por ejemplo, <code>/movies?year=2023</code>).</li> </ul> </li> <li> <p>Restricciones:</p> <ul> <li>No usar servicios ni DTOs.</li> <li>No usar pipes como <code>ParseIntPipe</code> ni excepciones HTTP avanzadas.</li> <li>Mantener los datos en un array dentro del controlador (simulando una base de datos).</li> <li>No modificar c\u00f3digos de estado HTTP predeterminados.</li> </ul> </li> <li> <p>Entregable:</p> <ul> <li>Un archivo <code>movies.controller.ts</code> con el c\u00f3digo del controlador.</li> <li>El c\u00f3digo debe ser claro, con comentarios que expliquen cada m\u00e9todo.</li> </ul> </li> <li> <p>Puntos a evaluar:</p> <ul> <li>Correcta definici\u00f3n de rutas con decoradores HTTP.</li> <li>Manejo adecuado de par\u00e1metros de ruta (<code>@Param</code>) y cuerpo (<code>@Body</code>).</li> <li>Uso de <code>@Query</code> para el filtro por a\u00f1o.</li> <li>Organizaci\u00f3n y claridad del c\u00f3digo.</li> </ul> </li> </ol> <p>Plantilla inicial A continuaci\u00f3n, se proporciona una plantilla b\u00e1sica para que los estudiantes completen:</p> <pre><code>import { Controller, Get, Post, Put, Delete, Param, Body, Query } from '@nestjs/common';\n\n@Controller('movies')\nexport class MoviesController {\n  // Array para simular la base de datos de pel\u00edculas\n  private movies = [\n    { id: 1, title: 'Inception', year: 2010 },\n    { id: 2, title: 'The Matrix', year: 1999 },\n  ];\n\n  // TODO: Implementar los m\u00e9todos seg\u00fan las indicaciones\n}\n</code></pre> <p>Instrucciones </p> <ol> <li>Dentro de la clase <code>MoviesController</code>, implementen los m\u00e9todos para las rutas especificadas (GET, GET/:id, POST, PUT/:id, DELETE/:id).</li> <li>Usen el array <code>movies</code> para almacenar y manipular los datos.</li> <li>Para la ruta GET /movies, incluyan un filtro opcional por a\u00f1o usando <code>@Query('year')</code>.</li> <li>Aseg\u00farense de que los m\u00e9todos manejen correctamente los par\u00e1metros de ruta (<code>id</code>) y el cuerpo de la solicitud (<code>title</code> y <code>year</code>).</li> <li>Agreguen comentarios explicando qu\u00e9 hace cada m\u00e9todo.</li> <li> <p>Prueben las rutas usando un cliente como Postman con solicitudes como:</p> <ul> <li>GET <code>http://localhost:3000/movies</code></li> <li>GET <code>http://localhost:3000/movies?year=2010</code></li> <li>GET <code>http://localhost:3000/movies/1</code></li> <li>POST <code>http://localhost:3000/movies</code> con <code>{ \"title\": \"Avatar\", \"year\": 2009 }</code></li> <li>PUT <code>http://localhost:3000/movies/1</code> con <code>{ \"title\": \"Inception Updated\", \"year\": 2010 }</code></li> <li>DELETE <code>http://localhost:3000/movies/1</code></li> </ul> </li> </ol>"},{"location":"content/p3s/","title":"P3s","text":""},{"location":"content/p3s/#actividad-crear-un-controlador-basico-para-gestionar-peliculas-en-nestjs","title":"Actividad: Crear un controlador b\u00e1sico para gestionar pel\u00edculas en NestJS","text":"<p>Enunciado Como desarrolladores principiantes en NestJS, su tarea es crear un controlador para gestionar una colecci\u00f3n de pel\u00edculas en una aplicaci\u00f3n de servidor. El controlador debe manejar solicitudes HTTP b\u00e1sicas (GET, POST, PUT, DELETE) y permitir acceder a par\u00e1metros de ruta y datos del cuerpo de la solicitud. La actividad se centra en los conceptos fundamentales de controladores, rutas y manejo de par\u00e1metros, sin usar servicios ni DTOs, y siguiendo las indicaciones vistas en los puntos 1 al 4 del tutorial sobre controladores en NestJS.</p> <p>Objetivo Implementar un controlador en NestJS que gestione un recurso de pel\u00edculas con rutas para listar, obtener, crear, actualizar y eliminar pel\u00edculas, utilizando decoradores de rutas y par\u00e1metros.</p> <p>Indicaciones 1. Modelo: El recurso a manejar es pel\u00edculas (movies). Cada pel\u00edcula tiene un <code>id</code> (n\u00famero), <code>title</code> (cadena) y <code>year</code> (n\u00famero). No se usar\u00e1 una base de datos; en su lugar, simulen los datos con un array en memoria dentro del controlador. 2. Requisitos del controlador:    - Crear una clase <code>MoviesController</code> decorada con <code>@Controller('movies')</code> para definir la ruta base <code>/movies</code>.    - Implementar las siguientes rutas usando los decoradores HTTP correspondientes:      - GET /movies: Devuelve la lista completa de pel\u00edculas.      - GET /movies/:id: Devuelve una pel\u00edcula espec\u00edfica seg\u00fan su ID. Si no existe, devolver un mensaje de error simple (sin usar excepciones como <code>NotFoundException</code>).      - POST /movies: Crea una nueva pel\u00edcula a partir de los datos enviados en el cuerpo de la solicitud (t\u00edtulo y a\u00f1o).      - PUT /movies/:id: Actualiza una pel\u00edcula existente seg\u00fan su ID, usando los datos del cuerpo.      - DELETE /movies/:id: Elimina una pel\u00edcula seg\u00fan su ID.    - Usar <code>@Param()</code> para capturar el par\u00e1metro <code>id</code> de la ruta.    - Usar <code>@Body()</code> para capturar los datos del cuerpo en las rutas POST y PUT.    - Usar <code>@Query()</code> para agregar un par\u00e1metro de consulta opcional en la ruta GET /movies que permita filtrar pel\u00edculas por a\u00f1o (por ejemplo, <code>/movies?year=2023</code>). 3. Restricciones:    - No usar servicios ni DTOs.    - No usar pipes como <code>ParseIntPipe</code> ni excepciones HTTP avanzadas.    - Mantener los datos en un array dentro del controlador (simulando una base de datos).    - No modificar c\u00f3digos de estado HTTP predeterminados. 4. Entregable:    - Un archivo <code>movies.controller.ts</code> con el c\u00f3digo del controlador.    - El c\u00f3digo debe ser claro, con comentarios que expliquen cada m\u00e9todo. 5. Puntos a evaluar:    - Correcta definici\u00f3n de rutas con decoradores HTTP.    - Manejo adecuado de par\u00e1metros de ruta (<code>@Param</code>) y cuerpo (<code>@Body</code>).    - Uso de <code>@Query</code> para el filtro por a\u00f1o.    - Organizaci\u00f3n y claridad del c\u00f3digo.</p> <p>Plantilla inicial A continuaci\u00f3n, se proporciona una plantilla b\u00e1sica para que los estudiantes completen:</p> <pre><code>import { Controller, Get, Post, Put, Delete, Param, Body, Query } from '@nestjs/common';\n\n@Controller('movies')\nexport class MoviesController {\n  // Array para simular la base de datos de pel\u00edculas\n  private movies = [\n    { id: 1, title: 'Inception', year: 2010 },\n    { id: 2, title: 'The Matrix', year: 1999 },\n  ];\n\n  // TODO: Implementar los m\u00e9todos seg\u00fan las indicaciones\n}\n</code></pre> <p>Instrucciones para los estudiantes 1. Dentro de la clase <code>MoviesController</code>, implementen los m\u00e9todos para las rutas especificadas (GET, GET/:id, POST, PUT/:id, DELETE/:id). 2. Usen el array <code>movies</code> para almacenar y manipular los datos. 3. Para la ruta GET /movies, incluyan un filtro opcional por a\u00f1o usando <code>@Query('year')</code>. 4. Aseg\u00farense de que los m\u00e9todos manejen correctamente los par\u00e1metros de ruta (<code>id</code>) y el cuerpo de la solicitud (<code>title</code> y <code>year</code>). 5. Agreguen comentarios explicando qu\u00e9 hace cada m\u00e9todo. 6. Prueben las rutas usando un cliente como Postman con solicitudes como:    - GET <code>http://localhost:3000/movies</code>    - GET <code>http://localhost:3000/movies?year=2010</code>    - GET <code>http://localhost:3000/movies/1</code>    - POST <code>http://localhost:3000/movies</code> con <code>{ \"title\": \"Avatar\", \"year\": 2009 }</code>    - PUT <code>http://localhost:3000/movies/1</code> con <code>{ \"title\": \"Inception Updated\", \"year\": 2010 }</code>    - DELETE <code>http://localhost:3000/movies/1</code></p> <p>Soluci\u00f3n de ejemplo A continuaci\u00f3n, se proporciona una soluci\u00f3n completa para que los estudiantes puedan compararla despu\u00e9s de intentar la actividad. Nota: Esta soluci\u00f3n debe usarse como referencia despu\u00e9s de que los estudiantes completen la actividad.</p> <pre><code>import { Controller, Get, Post, Put, Delete, Param, Body, Query } from '@nestjs/common';\n\n@Controller('movies')\nexport class MoviesController {\n  // Array para simular la base de datos de pel\u00edculas\n  private movies = [\n    { id: 1, title: 'Inception', year: 2010 },\n    { id: 2, title: 'The Matrix', year: 1999 },\n  ];\n\n  // GET /movies: Devuelve todas las pel\u00edculas, con filtro opcional por a\u00f1o\n  @Get()\n  findAll(@Query('year') year?: string) {\n    if (year) {\n      return this.movies.filter(movie =&gt; movie.year === parseInt(year));\n    }\n    return this.movies;\n  }\n\n  // GET /movies/:id: Devuelve una pel\u00edcula por su ID\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    const movie = this.movies.find(movie =&gt; movie.id === parseInt(id));\n    if (!movie) {\n      return { message: `Movie with ID ${id} not found` };\n    }\n    return movie;\n  }\n\n  // POST /movies: Crea una nueva pel\u00edcula\n  @Post()\n  create(@Body() body: { title: string; year: number }) {\n    const newId = this.movies.length &gt; 0 ? Math.max(...this.movies.map(m =&gt; m.id)) + 1 : 1;\n    const newMovie = { id: newId, title: body.title, year: body.year };\n    this.movies.push(newMovie);\n    return newMovie;\n  }\n\n  // PUT /movies/:id: Actualiza una pel\u00edcula existente\n  @Put(':id')\n  update(@Param('id') id: string, @Body() body: { title: string; year: number }) {\n    const index = this.movies.findIndex(movie =&gt; movie.id === parseInt(id));\n    if (index === -1) {\n      return { message: `Movie with ID ${id} not found` };\n    }\n    this.movies[index] = { id: parseInt(id), title: body.title, year: body.year };\n    return this.movies[index];\n  }\n\n  // DELETE /movies/:id: Elimina una pel\u00edcula\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    const index = this.movies.findIndex(movie =&gt; movie.id === parseInt(id));\n    if (index === -1) {\n      return { message: `Movie with ID ${id} not found` };\n    }\n    const deletedMovie = this.movies.splice(index, 1)[0];\n    return { message: `Movie with ID ${id} deleted`, data: deletedMovie };\n  }\n}\n</code></pre> <p>Explicaci\u00f3n de la soluci\u00f3n: - Rutas: Se usan <code>@Get</code>, <code>@Post</code>, <code>@Put</code>, y <code>@Delete</code> para las operaciones CRUD. - Par\u00e1metros:   - <code>@Param('id')</code>: Captura el ID de la ruta (por ejemplo, <code>/movies/1</code>).   - <code>@Body()</code>: Obtiene <code>title</code> y <code>year</code> del cuerpo de la solicitud.   - <code>@Query('year')</code>: Filtra pel\u00edculas por a\u00f1o en GET /movies. - Datos: El array <code>movies</code> simula una base de datos en memoria. - L\u00f3gica simple: Los m\u00e9todos manipulan el array directamente, sin servicios ni validaciones avanzadas, respetando las restricciones. - Respuestas: Los m\u00e9todos devuelven datos que NestJS convierte en JSON, con mensajes de error simples para casos no encontrados.</p>"},{"location":"content/p3s/#solucion-controlador-de-peliculas-con-bucles-forof","title":"Soluci\u00f3n: Controlador de pel\u00edculas con bucles <code>for...of</code>","text":"<pre><code>import { Controller, Get, Post, Put, Delete, Param, Body, Query } from '@nestjs/common';\n\n@Controller('movies')\nexport class MoviesController {\n  // Array para simular la base de datos de pel\u00edculas\n  private movies = [\n    { id: 1, title: 'Inception', year: 2010 },\n    { id: 2, title: 'The Matrix', year: 1999 },\n  ];\n\n  // GET /movies: Devuelve todas las pel\u00edculas, con filtro opcional por a\u00f1o\n  @Get()\n  findAll(@Query('year') year?: string) {\n    // Si no se proporciona un a\u00f1o, devolver todas las pel\u00edculas\n    if (!year) {\n      return this.movies;\n    }\n\n    // Filtrar pel\u00edculas por a\u00f1o usando un bucle for...of\n    const filteredMovies = [];\n    const yearNum = parseInt(year);\n    for (const movie of this.movies) {\n      if (movie.year === yearNum) {\n        filteredMovies.push(movie);\n      }\n    }\n    return filteredMovies;\n  }\n\n  // GET /movies/:id: Devuelve una pel\u00edcula por su ID\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    const idNum = parseInt(id);\n    // Buscar pel\u00edcula por ID usando un bucle for...of\n    for (const movie of this.movies) {\n      if (movie.id === idNum) {\n        return movie;\n      }\n    }\n    return { message: `Movie with ID ${id} not found` };\n  }\n\n  // POST /movies: Crea una nueva pel\u00edcula\n  @Post()\n  create(@Body() body: { title: string; year: number }) {\n    // Generar un nuevo ID basado en el m\u00e1ximo ID existente\n    let maxId = 0;\n    for (const movie of this.movies) {\n      if (movie.id &gt; maxId) {\n        maxId = movie.id;\n      }\n    }\n    const newId = maxId + 1;\n\n    // Crear y agregar la nueva pel\u00edcula\n    const newMovie = { id: newId, title: body.title, year: body.year };\n    this.movies.push(newMovie);\n    return newMovie;\n  }\n\n  // PUT /movies/:id: Actualiza una pel\u00edcula existente\n  @Put(':id')\n  update(@Param('id') id: string, @Body() body: { title: string; year: number }) {\n    const idNum = parseInt(id);\n    // Buscar el \u00edndice de la pel\u00edcula por ID\n    let index = -1;\n    let i = 0;\n    for (const movie of this.movies) {\n      if (movie.id === idNum) {\n        index = i;\n        break;\n      }\n      i++;\n    }\n\n    // Si no se encuentra, devolver mensaje de error\n    if (index === -1) {\n      return { message: `Movie with ID ${id} not found` };\n    }\n\n    // Actualizar la pel\u00edcula\n    this.movies[index] = { id: idNum, title: body.title, year: body.year };\n    return this.movies[index];\n  }\n\n  // DELETE /movies/:id: Elimina una pel\u00edcula\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    const idNum = parseInt(id);\n    // Buscar el \u00edndice de la pel\u00edcula por ID\n    let index = -1;\n    let i = 0;\n    for (const movie of this.movies) {\n      if (movie.id === idNum) {\n        index = i;\n        break;\n      }\n      i++;\n    }\n\n    // Si no se encuentra, devolver mensaje de error\n    if (index === -1) {\n      return { message: `Movie with ID ${id} not found` };\n    }\n\n    // Eliminar la pel\u00edcula usando splice\n    const deletedMovie = this.movies[index];\n    const newMovies = [];\n    let j = 0;\n    for (const movie of this.movies) {\n      if (j !== index) {\n        newMovies.push(movie);\n      }\n      j++;\n    }\n    this.movies = newMovies;\n\n    return { message: `Movie with ID ${id} deleted`, data: deletedMovie };\n  }\n}\n</code></pre>"},{"location":"content/p3s/#explicacion-de-la-solucion","title":"Explicaci\u00f3n de la soluci\u00f3n","text":"<ol> <li>Controlador y rutas:</li> <li>La clase <code>MoviesController</code> usa <code>@Controller('movies')</code> para establecer la ruta base <code>/movies</code>.</li> <li> <p>Los m\u00e9todos usan decoradores HTTP (<code>@Get</code>, <code>@Post</code>, <code>@Put</code>, <code>@Delete</code>) para manejar las operaciones CRUD:</p> <ul> <li><code>GET /movies</code>: Lista todas las pel\u00edculas o filtra por a\u00f1o.</li> <li><code>GET /movies/:id</code>: Obtiene una pel\u00edcula por ID.</li> <li><code>POST /movies</code>: Crea una nueva pel\u00edcula.</li> <li><code>PUT /movies/:id</code>: Actualiza una pel\u00edcula.</li> <li><code>DELETE /movies/:id</code>: Elimina una pel\u00edcula.</li> </ul> </li> <li> <p>Manejo de par\u00e1metros:</p> </li> <li><code>@Param('id')</code>: Captura el par\u00e1metro <code>id</code> de la ruta (por ejemplo, <code>/movies/1</code>). Se convierte a n\u00famero con <code>parseInt</code> para comparaciones.</li> <li><code>@Body()</code>: Captura el cuerpo de la solicitud (por ejemplo, <code>{ \"title\": \"Avatar\", \"year\": 2009 }</code>) en las rutas POST y PUT.</li> <li> <p><code>@Query('year')</code>: Captura el par\u00e1metro de consulta <code>year</code> (por ejemplo, <code>/movies?year=2010</code>) para filtrar pel\u00edculas.</p> </li> <li> <p>Uso de bucles <code>for...of</code>:</p> </li> <li>En lugar de m\u00e9todos como <code>find</code>, <code>filter</code> o <code>map</code>, se usan bucles <code>for...of</code> para iterar sobre el array <code>movies</code>.</li> <li>GET /movies: Filtra pel\u00edculas por a\u00f1o creando un nuevo array <code>filteredMovies</code>.</li> <li>GET /movies/:id: Busca una pel\u00edcula comparando el ID.</li> <li>POST /movies: Encuentra el m\u00e1ximo ID para asignar un nuevo ID.</li> <li>PUT /movies/:id: Busca el \u00edndice de la pel\u00edcula para actualizarla.</li> <li> <p>DELETE /movies/:id: Busca el \u00edndice y crea un nuevo array sin la pel\u00edcula eliminada.</p> </li> <li> <p>Gesti\u00f3n de datos:</p> </li> <li>El array <code>movies</code> simula una base de datos en memoria, inicializado con dos pel\u00edculas.</li> <li>Los m\u00e9todos manipulan este array directamente, respetando la restricci\u00f3n de no usar servicios.</li> <li> <p>No se usan DTOs ni pipes, por lo que no hay validaci\u00f3n avanzada de los datos de entrada.</p> </li> <li> <p>Respuestas:</p> </li> <li>Los m\u00e9todos devuelven objetos o arrays que NestJS convierte en JSON.</li> <li>Para casos de error (por ejemplo, pel\u00edcula no encontrada), se devuelve un objeto con un mensaje: <code>{ message: \"Movie with ID X not found\" }</code>.</li> </ol>"},{"location":"content/p3s/#pruebas-sugeridas","title":"Pruebas sugeridas","text":"<p>Los estudiantes pueden probar las rutas con un cliente HTTP como Postman: - GET <code>http://localhost:3000/movies</code> \u2192 Devuelve <code>[{ id: 1, title: \"Inception\", year: 2010 }, { id: 2, title: \"The Matrix\", year: 1999 }]</code>. - GET <code>http://localhost:3000/movies?year=2010</code> \u2192 Devuelve <code>[{ id: 1, title: \"Inception\", year: 2010 }]</code>. - GET <code>http://localhost:3000/movies/1</code> \u2192 Devuelve <code>{ id: 1, title: \"Inception\", year: 2010 }</code>. - GET <code>http://localhost:3000/movies/999</code> \u2192 Devuelve <code>{ message: \"Movie with ID 999 not found\" }</code>. - POST <code>http://localhost:3000/movies</code> con <code>{ \"title\": \"Avatar\", \"year\": 2009 }</code> \u2192 Devuelve <code>{ id: 3, title: \"Avatar\", year: 2009 }</code>. - PUT <code>http://localhost:3000/movies/1</code> con <code>{ \"title\": \"Inception Updated\", \"year\": 2011 }</code> \u2192 Devuelve <code>{ id: 1, title: \"Inception Updated\", year: 2011 }</code>. - DELETE <code>http://localhost:3000/movies/1</code> \u2192 Devuelve <code>{ message: \"Movie with ID 1 deleted\", data: { id: 1, title: \"Inception\", year: 2010 } }</code>.</p>"},{"location":"content/p4/","title":"Servicios en NestJS","text":"<p>Los servicios en NestJS son clases que encapsulan la l\u00f3gica de negocio de una aplicaci\u00f3n, promoviendo la reutilizaci\u00f3n, la separaci\u00f3n de preocupaciones y la modularidad. Este documento explica c\u00f3mo crear y usar servicios en NestJS, con un ejemplo pr\u00e1ctico de un servicio para gestionar usuarios en memoria.</p>"},{"location":"content/p4/#que-es-un-servicio-en-nestjs","title":"\u00bfQu\u00e9 es un servicio en NestJS?","text":"<p>Un servicio es una clase decorada con <code>@Injectable()</code>, que permite inyectarla como dependencia en otros componentes, como controladores o servicios. Los servicios:</p> <ul> <li>Encapsulan l\u00f3gica de negocio: Mantienen la l\u00f3gica compleja separada de los controladores, que manejan solicitudes HTTP.</li> <li>Promueven reutilizaci\u00f3n: Pueden ser usados por m\u00faltiples controladores o m\u00f3dulos.</li> <li>Facilitan la modularidad: Se organizan en m\u00f3dulos, mejorando la escalabilidad.</li> <li>Son gestionados por inyecci\u00f3n de dependencias: NestJS los instancia y comparte autom\u00e1ticamente.</li> </ul>"},{"location":"content/p4/#crear-un-servicio","title":"Crear un servicio","text":"<p>Puedes crear un servicio manualmente o usando el CLI de NestJS:</p> <pre><code>nest generate service users\n</code></pre> <p>Esto genera un archivo <code>users.service.ts</code> en la carpeta <code>src/users</code>.</p>"},{"location":"content/p4/#estructura-basica","title":"Estructura b\u00e1sica","text":"<p>Un servicio b\u00e1sico tiene la siguiente estructura:</p> <pre><code>import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UsersService {\n  // L\u00f3gica del servicio aqu\u00ed\n}\n</code></pre> <p>El decorador <code>@Injectable()</code> indica que la clase puede ser inyectada.</p>"},{"location":"content/p4/#ejemplo-practico-servicio-para-gestionar-usuarios","title":"Ejemplo pr\u00e1ctico: Servicio para gestionar usuarios","text":"<p>Crearemos un servicio para gestionar usuarios en memoria (usando un arreglo) con operaciones CRUD (Crear, Leer, Actualizar, Eliminar).</p>"},{"location":"content/p4/#1-definir-el-modelo-del-usuario","title":"1. Definir el modelo del usuario","text":"<p>Primero, definimos una interfaz para el usuario:</p> <pre><code>// src/users/user.interface.ts\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n</code></pre>"},{"location":"content/p4/#2-implementar-el-servicio","title":"2. Implementar el servicio","text":"<p>El servicio implementa las operaciones CRUD:</p> <pre><code>// src/users/users.service.ts\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { User } from './user.interface';\n\n@Injectable()\nexport class UsersService {\n  private users: User[] = [];\n  private idCounter = 1;\n\n  // Crear un nuevo usuario\n  create(user: Omit&lt;User, 'id'&gt;): User {\n    const newUser: User = {\n      id: this.idCounter++,\n      ...user,\n    };\n    this.users.push(newUser);\n    return newUser;\n  }\n\n  // Obtener todos los usuarios\n  findAll(): User[] {\n    return this.users;\n  }\n\n  // Obtener un usuario por ID\n  findOne(id: number): User {\n    const user = this.users.find((u) =&gt; u.id === id);\n    if (!user) {\n      throw new NotFoundException(`Usuario con ID ${id} no encontrado`);\n    }\n    return user;\n  }\n\n  // Actualizar un usuario\n  update(id: number, updateData: Partial&lt;User&gt;): User {\n    const user = this.findOne(id);\n    const updatedUser = { ...user, ...updateData };\n    this.users = this.users.map((u) =&gt; (u.id === id ? updatedUser : u));\n    return updatedUser;\n  }\n\n  // Eliminar un usuario\n  remove(id: number): void {\n    const userIndex = this.users.findIndex((u) =&gt; u.id === id);\n    if (userIndex === -1) {\n      throw new NotFoundException(`Usuario con ID ${id} no encontrado`);\n    }\n    this.users.splice(userIndex, 1);\n  }\n}\n</code></pre>"},{"location":"content/p4/#explicacion-del-servicio","title":"Explicaci\u00f3n del servicio","text":"<ul> <li>Decorador <code>@Injectable()</code>: Permite la inyecci\u00f3n del servicio.</li> <li>Almacenamiento en memoria: Usa un arreglo <code>users</code> y un contador <code>idCounter</code> para IDs \u00fanicos.</li> <li>M\u00e9todos CRUD:</li> <li><code>create</code>: Crea un usuario con un ID \u00fanico.</li> <li><code>findAll</code>: Devuelve todos los usuarios.</li> <li><code>findOne</code>: Busca un usuario por ID, lanzando una excepci\u00f3n si no existe.</li> <li><code>update</code>: Actualiza un usuario existente.</li> <li><code>remove</code>: Elimina un usuario por ID.</li> <li>Manejo de errores: Usa <code>NotFoundException</code> para casos de usuarios no encontrados.</li> </ul>"},{"location":"content/p4/#integrar-el-servicio-en-un-controlador","title":"Integrar el servicio en un controlador","text":"<p>El servicio se inyecta en un controlador para manejar solicitudes HTTP.</p>"},{"location":"content/p4/#crear-un-controlador","title":"Crear un controlador","text":"<pre><code>// src/users/users.controller.ts\nimport { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { User } from './user.interface';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: Omit&lt;User, 'id'&gt;): User {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll(): User[] {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): User {\n    return this.usersService.findOne(Number(id));\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: Partial&lt;User&gt;): User {\n    return this.usersService.update(Number(id), updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string): void {\n    this.usersService.remove(Number(id));\n  }\n}\n</code></pre>"},{"location":"content/p4/#explicacion-del-controlador","title":"Explicaci\u00f3n del controlador","text":"<ul> <li>Decorador <code>@Controller('users')</code>: Define rutas bajo <code>/users</code>.</li> <li>Inyecci\u00f3n del servicio: El <code>UsersService</code> se inyecta v\u00eda el constructor.</li> <li>M\u00e9todos HTTP:</li> <li><code>@Post()</code>: Crea un usuario.</li> <li><code>@Get()</code>: Obtiene todos los usuarios.</li> <li><code>@Get(':id')</code>: Obtiene un usuario por ID.</li> <li><code>@Put(':id')</code>: Actualiza un usuario.</li> <li><code>@Delete(':id')</code>: Elimina un usuario.</li> <li>Par\u00e1metros y cuerpo: Usa <code>@Param</code> y <code>@Body</code> para extraer datos de la solicitud.</li> </ul>"},{"location":"content/p4/#organizar-en-un-modulo","title":"Organizar en un m\u00f3dulo","text":"<p>Los servicios y controladores se agrupan en m\u00f3dulos para mantener el c\u00f3digo organizado.</p>"},{"location":"content/p4/#crear-un-modulo","title":"Crear un m\u00f3dulo","text":"<pre><code>// src/users/users.module.ts\nimport { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n</code></pre>"},{"location":"content/p4/#integrar-el-modulo","title":"Integrar el m\u00f3dulo","text":"<p>El m\u00f3dulo se importa en el m\u00f3dulo principal:</p> <pre><code>// src/app.module.ts\nimport { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [UsersModule],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"content/p4/#explicacion-del-modulo","title":"Explicaci\u00f3n del m\u00f3dulo","text":"<ul> <li>Decorador <code>@Module()</code>: Agrupa controladores y servicios.</li> <li>Propiedades:</li> <li><code>controllers</code>: Lista los controladores.</li> <li><code>providers</code>: Lista los servicios.</li> <li><code>exports</code>: Permite usar el servicio en otros m\u00f3dulos.</li> <li>Integraci\u00f3n: Importar <code>UsersModule</code> en <code>AppModule</code> habilita la funcionalidad de usuarios.</li> </ul>"},{"location":"content/p4/#ejemplo-de-solicitudes-http","title":"Ejemplo de solicitudes HTTP","text":"<p>Puedes interactuar con el servicio mediante solicitudes HTTP:</p> <ul> <li> <p>Crear un usuario:   <pre><code>curl -X POST http://localhost:3000/users -H \"Content-Type: application/json\" -d '{\"name\": \"Juan\", \"email\": \"juan@example.com\"}'\n</code></pre> Respuesta:   <pre><code>{ \"id\": 1, \"name\": \"Juan\", \"email\": \"juan@example.com\" }\n</code></pre></p> </li> <li> <p>Obtener todos los usuarios:   <pre><code>curl http://localhost:3000/users\n</code></pre> Respuesta:   <pre><code>[{ \"id\": 1, \"name\": \"Juan\", \"email\": \"juan@example.com\" }]\n</code></pre></p> </li> <li> <p>Obtener un usuario por ID:   <pre><code>curl http://localhost:3000/users/1\n</code></pre> Respuesta:   <pre><code>{ \"id\": 1, \"name\": \"Juan\", \"email\": \"juan@example.com\" }\n</code></pre></p> </li> <li> <p>Actualizar un usuario:   <pre><code>curl -X PUT http://localhost:3000/users/1 -H \"Content-Type: application/json\" -d '{\"name\": \"Juan P\u00e9rez\"}'\n</code></pre> Respuesta:   <pre><code>{ \"id\": 1, \"name\": \"Juan P\u00e9rez\", \"email\": \"juan@example.com\" }\n</code></pre></p> </li> <li> <p>Eliminar un usuario:   <pre><code>curl -X DELETE http://localhost:3000/users/1\n</code></pre></p> </li> </ul>"},{"location":"content/p4/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Separaci\u00f3n de preocupaciones: Mant\u00e9n la l\u00f3gica de negocio en servicios y las solicitudes HTTP en controladores.</li> <li>Manejo de errores: Usa excepciones como <code>NotFoundException</code> para errores estandarizados.</li> <li>Inyecci\u00f3n de dependencias: Aprovecha el sistema de NestJS para compartir servicios.</li> <li>Modularidad: Organiza el c\u00f3digo en m\u00f3dulos.</li> <li>Tipado fuerte: Usa TypeScript para interfaces y tipos.</li> <li>Validaci\u00f3n: Considera usar DTOs con <code>class-validator</code> para validar datos de entrada.</li> </ul>"},{"location":"content/p4/#logica-de-negocio-en-nestjs","title":"L\u00f3gica de Negocio en NestJS","text":"<p>La l\u00f3gica de negocio es un concepto clave en el desarrollo de aplicaciones, y en NestJS, se implementa principalmente en los servicios. Este documento explica qu\u00e9 es la l\u00f3gica de negocio, su importancia y c\u00f3mo se encapsula en un servicio de NestJS, utilizando un ejemplo pr\u00e1ctico de gesti\u00f3n de usuarios en memoria.</p>"},{"location":"content/p4/#que-es-la-logica-de-negocio","title":"\u00bfQu\u00e9 es la l\u00f3gica de negocio?","text":"<p>La l\u00f3gica de negocio se refiere a las reglas, procesos y c\u00e1lculos que definen c\u00f3mo funciona una aplicaci\u00f3n desde la perspectiva del dominio del problema que resuelve. Es el n\u00facleo de la funcionalidad de la aplicaci\u00f3n, independiente de la interfaz de usuario o las interacciones HTTP. En otras palabras, es el conjunto de operaciones que manipulan los datos seg\u00fan las necesidades del negocio.</p>"},{"location":"content/p4/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li>Espec\u00edfica del dominio: Representa las reglas \u00fanicas del negocio, como c\u00f3mo se crean usuarios, c\u00f3mo se calculan precios o c\u00f3mo se validan transacciones.</li> <li>Independiente de la infraestructura: No depende de bases de datos, APIs externas ni frameworks de presentaci\u00f3n.</li> <li>Reutilizable: Puede ser utilizada por diferentes partes de la aplicaci\u00f3n (controladores, otros servicios, etc.).</li> <li>Encapsulada: En NestJS, se implementa en servicios para mantener la separaci\u00f3n de preocupaciones.</li> </ul>"},{"location":"content/p4/#ejemplo-de-logica-de-negocio","title":"Ejemplo de l\u00f3gica de negocio","text":"<p>En una aplicaci\u00f3n de gesti\u00f3n de usuarios, la l\u00f3gica de negocio incluye operaciones como: - Crear un usuario con un ID \u00fanico. - Validar que un usuario exista antes de actualizarlo o eliminarlo. - Actualizar los datos de un usuario sin sobrescribir informaci\u00f3n innecesaria.</p>"},{"location":"content/p4/#logica-de-negocio-en-servicios-de-nestjs","title":"L\u00f3gica de negocio en servicios de NestJS","text":"<p>En NestJS, los servicios son el lugar ideal para implementar la l\u00f3gica de negocio. Los servicios son clases decoradas con <code>@Injectable()</code>, lo que permite inyectarlos como dependencias en controladores u otros servicios. Esto promueve:</p> <ul> <li>Separaci\u00f3n de preocupaciones: Los controladores manejan solicitudes HTTP, mientras que los servicios gestionan la l\u00f3gica de negocio.</li> <li>Reutilizaci\u00f3n: Un servicio puede ser usado por m\u00faltiples controladores o m\u00f3dulos.</li> <li>Modularidad: Los servicios se organizan en m\u00f3dulos, facilitando la escalabilidad.</li> </ul>"},{"location":"content/p4/#actividad-crear-un-modulo-y-servicio-para-tareas-de-jardineria-en-nestjs","title":"Actividad: Crear un m\u00f3dulo y servicio para tareas de jardiner\u00eda en NestJS","text":"<p>Esta actividad te gu\u00eda paso a paso para crear un m\u00f3dulo en NestJS que gestione tareas de jardiner\u00eda, una entidad no com\u00fan que representa tareas como regar plantas o podar arbustos. Aprender\u00e1s a implementar la l\u00f3gica de negocio en un servicio, conectarlo con un controlador y organizarlo en un m\u00f3dulo, usando un arreglo en memoria para almacenar datos.</p>"},{"location":"content/p4/#objetivos","title":"Objetivos","text":"<ul> <li>Crear un m\u00f3dulo para organizar el c\u00f3digo.</li> <li>Definir una entidad <code>GardeningTask</code> con propiedades espec\u00edficas.</li> <li>Implementar un servicio con l\u00f3gica de negocio para operaciones CRUD.</li> <li>Crear un controlador para manejar solicitudes HTTP.</li> <li>Integrar todo en una aplicaci\u00f3n NestJS.</li> </ul>"},{"location":"content/p4/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Tener instalado Node.js y el CLI de NestJS (<code>npm install -g @nestjs/cli</code>).</li> <li>Crear un proyecto nuevo con <code>nest new gardening-app</code> o usar uno existente.</li> <li>Conocimientos b\u00e1sicos de TypeScript y NestJS.</li> </ul>"},{"location":"content/p4/#paso-1-crear-el-modulo","title":"Paso 1: Crear el m\u00f3dulo","text":"<p>Un m\u00f3dulo en NestJS agrupa controladores, servicios y otros componentes relacionados. Crearemos un m\u00f3dulo para las tareas de jardiner\u00eda.</p>"},{"location":"content/p4/#generar-el-modulo","title":"Generar el m\u00f3dulo","text":"<p>Ejecuta el siguiente comando para generar el m\u00f3dulo:</p> <pre><code>nest generate module gardening-tasks\n</code></pre> <p>Esto crea la carpeta <code>src/gardening-tasks</code> con un archivo <code>gardening-tasks.module.ts</code>.</p>"},{"location":"content/p4/#configurar-el-modulo","title":"Configurar el m\u00f3dulo","text":"<p>Edita el archivo para declarar los componentes que se agregar\u00e1n m\u00e1s adelante:</p> <pre><code>// src/gardening-tasks/gardening-tasks.module.ts\nimport { Module } from '@nestjs/common';\nimport { GardeningTasksService } from './gardening-tasks.service';\nimport { GardeningTasksController } from './gardening-tasks.controller';\n\n@Module({\n  controllers: [GardeningTasksController],\n  providers: [GardeningTasksService],\n  exports: [GardeningTasksService],\n})\nexport class GardeningTasksModule {}\n</code></pre>"},{"location":"content/p4/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>Decorador <code>@Module()</code>: Define el m\u00f3dulo, agrupando controladores y servicios.</li> <li> <p>Propiedades:</p> </li> <li> <p><code>controllers</code>: Incluir\u00e1 el controlador que crearemos.</p> </li> <li><code>providers</code>: Incluir\u00e1 el servicio para la l\u00f3gica de negocio.</li> <li> <p><code>exports</code>: Permite que el servicio sea usado por otros m\u00f3dulos.</p> </li> <li> <p>Este m\u00f3dulo se importar\u00e1 en <code>app.module.ts</code> m\u00e1s adelante.</p> </li> </ul>"},{"location":"content/p4/#paso-2-definir-la-entidad-gardeningtask","title":"Paso 2: Definir la entidad <code>GardeningTask</code>","text":"<p>La entidad <code>GardeningTask</code> representa una tarea de jardiner\u00eda con propiedades como ID, descripci\u00f3n, tipo de tarea y estado de completitud.</p>"},{"location":"content/p4/#crear-la-interfaz","title":"Crear la interfaz","text":"<p>Crea un archivo para la interfaz:</p> <pre><code>// src/gardening-tasks/gardening-task.interface.ts\nexport interface GardeningTask {\n  id: number;\n  description: string;\n  taskType: 'watering' | 'pruning' | 'planting' | 'fertilizing';\n  isCompleted: boolean;\n}\n</code></pre>"},{"location":"content/p4/#explicacion_1","title":"Explicaci\u00f3n","text":"<ul> <li> <p>Propiedades:</p> </li> <li> <p><code>id</code>: Identificador \u00fanico de la tarea.</p> </li> <li><code>description</code>: Breve descripci\u00f3n (ej. \"Regar rosales\").</li> <li><code>taskType</code>: Tipo de tarea, restringido a valores espec\u00edficos.</li> <li> <p><code>isCompleted</code>: Indica si la tarea est\u00e1 completada.</p> </li> <li> <p>Usamos TypeScript para un tipado fuerte, asegurando que las tareas tengan un formato consistente.</p> </li> </ul>"},{"location":"content/p4/#paso-3-crear-el-servicio-con-logica-de-negocio","title":"Paso 3: Crear el servicio con l\u00f3gica de negocio","text":"<p>El servicio contendr\u00e1 la l\u00f3gica de negocio para gestionar tareas de jardiner\u00eda, incluyendo operaciones CRUD y una regla espec\u00edfica: no se puede actualizar una tarea completada.</p>"},{"location":"content/p4/#generar-el-servicio","title":"Generar el servicio","text":"<p>Ejecuta el comando para generar el servicio:</p> <pre><code>nest generate service gardening-tasks\n</code></pre>"},{"location":"content/p4/#implementar-el-servicio","title":"Implementar el servicio","text":"<p>Edita el archivo para incluir la l\u00f3gica de negocio:</p> <pre><code>// src/gardening-tasks/gardening-tasks.service.ts\nimport { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';\nimport { GardeningTask } from './gardening-task.interface';\n\n@Injectable()\nexport class GardeningTasksService {\n  private tasks: GardeningTask[] = [];\n  private idCounter = 1;\n\n  // Crear una nueva tarea\n  create(task: Omit&lt;GardeningTask, 'id' | 'isCompleted'&gt;): GardeningTask {\n    const newTask: GardeningTask = {\n      id: this.idCounter++,\n      ...task,\n      isCompleted: false, // Nueva tarea no est\u00e1 completada\n    };\n    this.tasks.push(newTask);\n    return newTask;\n  }\n\n  // Obtener todas las tareas\n  findAll(): GardeningTask[] {\n    return this.tasks;\n  }\n\n  // Obtener una tarea por ID\n  findOne(id: number): GardeningTask {\n    const task = this.tasks.find((t) =&gt; t.id === id);\n    if (!task) {\n      throw new NotFoundException(`Tarea con ID ${id} no encontrada`);\n    }\n    return task;\n  }\n\n  // Actualizar una tarea\n  update(id: number, updateData: Partial&lt;Omit&lt;GardeningTask, 'id'&gt;&gt;): GardeningTask {\n    const task = this.findOne(id);\n    if (task.isCompleted) {\n      throw new BadRequestException('No se puede actualizar una tarea completada');\n    }\n    const updatedTask = { ...task, ...updateData };\n    this.tasks = this.tasks.map((t) =&gt; (t.id === id ? updatedTask : t));\n    return updatedTask;\n  }\n\n  // Marcar una tarea como completada\n  complete(id: number): GardeningTask {\n    const task = this.findOne(id);\n    if (task.isCompleted) {\n      throw new BadRequestException('La tarea ya est\u00e1 completada');\n    }\n    const updatedTask = { ...task, isCompleted: true };\n    this.tasks = this.tasks.map((t) =&gt; (t.id === id ? updatedTask : t));\n    return updatedTask;\n  }\n\n  // Eliminar una tarea\n  remove(id: number): void {\n    const taskIndex = this.tasks.findIndex((t) =&gt; t.id === id);\n    if (taskIndex === -1) {\n      throw new NotFoundException(`Tarea con ID ${id} no encontrada`);\n    }\n    this.tasks.splice(taskIndex, 1);\n  }\n}\n</code></pre>"},{"location":"content/p4/#explicacion-de-la-logica-de-negocio","title":"Explicaci\u00f3n de la l\u00f3gica de negocio","text":"<ul> <li>Crear (<code>create</code>): Crea una tarea con un ID \u00fanico, inicializa <code>isCompleted</code> en <code>false</code> y la agrega al arreglo.</li> <li>Leer (<code>findAll</code>, <code>findOne</code>): Recupera todas las tareas o una espec\u00edfica, lanzando una excepci\u00f3n si no existe.</li> <li>Actualizar (<code>update</code>): Permite modificar la descripci\u00f3n o el tipo de tarea, pero lanza una excepci\u00f3n si la tarea est\u00e1 completada.</li> <li>Completar (<code>complete</code>): Marca una tarea como completada, con validaci\u00f3n para evitar completarla dos veces.</li> <li>Eliminar (<code>remove</code>): Elimina una tarea por ID, verificando su existencia.</li> <li>Manejo de errores: Usa <code>NotFoundException</code> para tareas inexistentes y <code>BadRequestException</code> para reglas de negocio violadas (ej. actualizar una tarea completada).</li> </ul> <p>Esta l\u00f3gica de negocio encapsula las reglas espec\u00edficas del dominio de jardiner\u00eda, como la restricci\u00f3n de no modificar tareas completadas.</p>"},{"location":"content/p4/#paso-4-crear-el-controlador","title":"Paso 4: Crear el controlador","text":"<p>El controlador conecta el servicio con solicitudes HTTP, actuando como interfaz entre el cliente y la l\u00f3gica de negocio.</p>"},{"location":"content/p4/#generar-el-controlador","title":"Generar el controlador","text":"<p>Ejecuta el comando:</p> <pre><code>nest generate controller gardening-tasks\n</code></pre>"},{"location":"content/p4/#implementar-el-controlador","title":"Implementar el controlador","text":"<p>Edita el archivo para manejar solicitudes HTTP:</p> <pre><code>// src/gardening-tasks/gardening-tasks.controller.ts\nimport { Controller, Get, Post, Body, Param, Put, Delete, Patch } from '@nestjs/common';\nimport { GardeningTasksService } from './gardening-tasks.service';\nimport { GardeningTask } from './gardening-task.interface';\n\n@Controller('gardening-tasks')\nexport class GardeningTasksController {\n  constructor(private readonly gardeningTasksService: GardeningTasksService) {}\n\n  @Post()\n  create(@Body() createTaskDto: Omit&lt;GardeningTask, 'id' | 'isCompleted'&gt;): GardeningTask {\n    return this.gardeningTasksService.create(createTaskDto);\n  }\n\n  @Get()\n  findAll(): GardeningTask[] {\n    return this.gardeningTasksService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): GardeningTask {\n    return this.gardeningTasksService.findOne(Number(id));\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateTaskDto: Partial&lt;Omit&lt;GardeningTask, 'id'&gt;&gt;): GardeningTask {\n    return this.gardeningTasksService.update(Number(id), updateTaskDto);\n  }\n\n  @Patch(':id/complete')\n  complete(@Param('id') id: string): GardeningTask {\n    return this.gardeningTasksService.complete(Number(id));\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string): void {\n    this.gardeningTasksService.remove(Number(id));\n  }\n}\n</code></pre>"},{"location":"content/p4/#explicacion_2","title":"Explicaci\u00f3n","text":"<ul> <li>Decorador <code>@Controller('gardening-tasks')</code>: Define rutas bajo <code>/gardening-tasks</code>.</li> <li>Inyecci\u00f3n del servicio: El <code>GardeningTasksService</code> se inyecta v\u00eda el constructor.</li> <li>M\u00e9todos HTTP:</li> <li><code>@Post()</code>: Crea una tarea.</li> <li><code>@Get()</code>: Obtiene todas las tareas.</li> <li><code>@Get(':id')</code>: Obtiene una tarea por ID.</li> <li><code>@Put(':id')</code>: Actualiza una tarea.</li> <li><code>@Patch(':id/complete')</code>: Marca una tarea como completada (usamos <code>PATCH</code> para una acci\u00f3n espec\u00edfica).</li> <li><code>@Delete(':id')</code>: Elimina una tarea.</li> <li>Par\u00e1metros y cuerpo: Usa <code>@Param</code> y <code>@Body</code> para extraer datos de la solicitud.</li> </ul>"},{"location":"content/p4/#paso-5-integrar-el-modulo-en-la-aplicacion","title":"Paso 5: Integrar el m\u00f3dulo en la aplicaci\u00f3n","text":"<p>Importa el m\u00f3dulo en el m\u00f3dulo principal de la aplicaci\u00f3n:</p> <pre><code>// src/app.module.ts\nimport { Module } from '@nestjs/common';\nimport { GardeningTasksModule } from './gardening-tasks/gardening-tasks.module';\n\n@Module({\n  imports: [GardeningTasksModule],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"content/p4/#explicacion_3","title":"Explicaci\u00f3n","text":"<ul> <li>Importar <code>GardeningTasksModule</code> en <code>AppModule</code> habilita la funcionalidad de tareas de jardiner\u00eda en la aplicaci\u00f3n.</li> </ul>"},{"location":"content/p4/#paso-6-probar-la-aplicacion","title":"Paso 6: Probar la aplicaci\u00f3n","text":"<p>Inicia la aplicaci\u00f3n con:</p> <pre><code>npm run start:dev\n</code></pre> <p>Usa herramientas como <code>curl</code> o Postman para probar las rutas:</p> <ul> <li> <p>Crear una tarea:   <pre><code>curl -X POST http://localhost:3000/gardening-tasks -H \"Content-Type: application/json\" -d \"{\\\"description\\\": \\\"Regar rosales\\\", \\\"taskType\\\": \\\"watering\\\"}\"\n</code></pre> Respuesta:   <pre><code>{ \"id\": 1, \"description\": \"Regar rosales\", \"taskType\": \"watering\", \"isCompleted\": false }\n</code></pre></p> </li> <li> <p>Obtener todas las tareas:   <pre><code>curl http://localhost:3000/gardening-tasks\n</code></pre> Respuesta:   <pre><code>[{ \"id\": 1, \"description\": \"Regar rosales\", \"taskType\": \"watering\", \"isCompleted\": false }]\n</code></pre></p> </li> <li> <p>Obtener una tarea por ID:   <pre><code>curl http://localhost:3000/gardening-tasks/1\n</code></pre> Respuesta:   <pre><code>{ \"id\": 1, \"description\": \"Regar rosales\", \"taskType\": \"watering\", \"isCompleted\": false }\n</code></pre></p> </li> <li> <p>Actualizar una tarea:   <pre><code>curl -X PUT http://localhost:3000/gardening-tasks/1 -H \"Content-Type: application/json\" -d '{\"description\": \"Regar rosales y lirios\"}'\n</code></pre> Respuesta:   <pre><code>{ \"id\": 1, \"description\": \"Regar rosales y lirios\", \"taskType\": \"watering\", \"isCompleted\": false }\n</code></pre></p> </li> <li> <p>Marcar como completada:   <pre><code>curl -X PATCH http://localhost:3000/gardening-tasks/1/complete\n</code></pre> Respuesta:   <pre><code>{ \"id\": 1, \"description\": \"Regar rosales y lirios\", \"taskType\": \"watering\", \"isCompleted\": true }\n</code></pre></p> </li> <li> <p>Eliminar una tarea:   <pre><code>curl -X DELETE http://localhost:3000/gardening-tasks/1\n</code></pre></p> </li> </ul>"},{"location":"content/p4/#buenas-practicas_1","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Encapsular l\u00f3gica de negocio: Mant\u00e9n las reglas del dominio (ej. no actualizar tareas completadas) en el servicio.</li> <li>Separaci\u00f3n de preocupaciones: Usa controladores para solicitudes HTTP y servicios para l\u00f3gica de negocio.</li> <li>Manejo de errores: Implementa excepciones como <code>NotFoundException</code> y <code>BadRequestException</code> para errores claros.</li> <li>Tipado fuerte: Usa interfaces de TypeScript para garantizar consistencia.</li> <li>Modularidad: Organiza el c\u00f3digo en m\u00f3dulos para escalabilidad.</li> </ul>"},{"location":"content/p4/#reto-crear-un-modulo-para-herramientas-de-jardineria","title":"Reto: Crear un m\u00f3dulo para herramientas de jardiner\u00eda","text":"<p>Ahora que has implementado el m\u00f3dulo para tareas de jardiner\u00eda, crea un nuevo m\u00f3dulo para gestionar herramientas de jardiner\u00eda (<code>GardenTool</code>). Sigue los pasos aprendidos para:</p> <ol> <li>Crear un m\u00f3dulo llamado <code>garden-tools</code>.</li> <li> <p>Definir una entidad <code>GardenTool</code> con las siguientes propiedades:</p> </li> <li> <p><code>id</code>: Identificador \u00fanico (n\u00famero).</p> </li> <li><code>name</code>: Nombre de la herramienta (ej. \"Tijeras de podar\").</li> <li><code>toolType</code>: Tipo de herramienta (<code>hand</code>, <code>power</code>, <code>manual</code>).</li> <li><code>isAvailable</code>: Indica si la herramienta est\u00e1 disponible (booleano).</li> <li>Implementar un servicio con l\u00f3gica de negocio para operaciones CRUD, incluyendo una regla espec\u00edfica: no se puede actualizar ni eliminar una herramienta que no est\u00e9 disponible (<code>isAvailable: false</code>).</li> <li> <p>Crear un controlador con rutas para:</p> </li> <li> <p>Crear una herramienta (<code>POST /garden-tools</code>).</p> </li> <li>Obtener todas las herramientas (<code>GET /garden-tools</code>).</li> <li>Obtener una herramienta por ID (<code>GET /garden-tools/:id</code>).</li> <li>Actualizar una herramienta (<code>PUT /garden-tools/:id</code>).</li> <li>Cambiar la disponibilidad de una herramienta (<code>PATCH /garden-tools/:id/toggle-availability</code>).</li> <li>Eliminar una herramienta (<code>DELETE /garden-tools/:id</code>).</li> <li>Integrar el m\u00f3dulo en <code>app.module.ts</code>.</li> <li>Probar las rutas con <code>curl</code> o Postman.</li> </ol>"},{"location":"content/p4/#pistas","title":"Pistas","text":"<ul> <li>Usa el CLI de NestJS (<code>nest generate module garden-tools</code>, etc.) para generar los archivos.</li> <li>Sigue la estructura del m\u00f3dulo <code>gardening-tasks</code> como referencia.</li> <li>Implementa la l\u00f3gica de negocio en el servicio, asegur\u00e1ndote de validar que la herramienta est\u00e9 disponible antes de actualizarla o eliminarla.</li> <li>Usa excepciones de NestJS (<code>NotFoundException</code>, <code>BadRequestException</code>) para manejar errores.</li> </ul>"},{"location":"content/p4/#ejemplo-de-solicitud-esperada","title":"Ejemplo de solicitud esperada","text":"<ul> <li>Crear una herramienta:   <pre><code>curl -X POST http://localhost:3000/garden-tools -H \"Content-Type: application/json\" -d '{\"name\": \"Tijeras de podar\", \"toolType\": \"manual\"}'\n</code></pre> Respuesta esperada:   <pre><code>{ \"id\": 1, \"name\": \"Tijeras de podar\", \"toolType\": \"manual\", \"isAvailable\": true }\n</code></pre></li> </ul>"},{"location":"content/p5/","title":"Tutorial de JSON en JavaScript","text":""},{"location":"content/p5/#introduccion","title":"Introducci\u00f3n","text":"<p>JSON (JavaScript Object Notation) es un formato ligero y universal para el intercambio de datos, ampliamente utilizado en aplicaciones web, APIs, y almacenamiento de datos. Este tutorial cubre desde los fundamentos de JSON hasta su uso avanzado en JavaScript, con ejemplos pr\u00e1cticos, ejercicios, y preguntas de an\u00e1lisis para reforzar el aprendizaje. Es ideal tanto para principiantes como para desarrolladores que deseen profundizar en el manejo de JSON.</p>"},{"location":"content/p5/#1-que-es-json","title":"1. \u00bfQu\u00e9 es JSON?","text":"<p>JSON es un formato de datos basado en texto, inspirado en la sintaxis de objetos de JavaScript, pero independiente del lenguaje. Es f\u00e1cil de leer para humanos y de procesar para m\u00e1quinas.</p>"},{"location":"content/p5/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li>Ligero y simple: Usa una estructura de pares clave-valor.</li> <li>Independiente del lenguaje: Compatible con Python, Java, y m\u00e1s.</li> <li>Tipos de datos soportados:</li> <li>Cadenas (strings)</li> <li>N\u00fameros</li> <li>Booleanos (<code>true</code>, <code>false</code>)</li> <li>Nulo (<code>null</code>)</li> <li>Arrays</li> <li>Objetos</li> </ul>"},{"location":"content/p5/#ejemplo-basico","title":"Ejemplo b\u00e1sico","text":"<pre><code>{\n  \"nombre\": \"Ana\",\n  \"edad\": 25,\n  \"esEstudiante\": true,\n  \"cursos\": [\"JavaScript\", \"Python\"],\n  \"direccion\": {\n    \"calle\": \"Av. Principal 123\",\n    \"ciudad\": \"Madrid\"\n  }\n}\n</code></pre>"},{"location":"content/p5/#2-estructura-y-sintaxis-de-json","title":"2. Estructura y Sintaxis de JSON","text":"<p>JSON sigue reglas estrictas para garantizar su validez:</p>"},{"location":"content/p5/#reglas-de-sintaxis","title":"Reglas de sintaxis","text":"<ul> <li>Objetos: Definidos entre llaves <code>{}</code> con pares <code>clave: valor</code>.</li> <li>Las claves son cadenas entre comillas dobles (<code>\"clave\"</code>).</li> <li>Los valores pueden ser cadenas, n\u00fameros, booleanos, nulos, arrays u objetos.</li> <li>Arrays: Definidos entre corchetes <code>[]</code>, pueden contener cualquier tipo de dato soportado.</li> <li>Restricciones:</li> <li>No se permiten comas finales.</li> <li>Las claves deben usar comillas dobles.</li> <li>No se admiten comentarios en JSON puro.</li> </ul>"},{"location":"content/p5/#ejemplo-valido","title":"Ejemplo v\u00e1lido","text":"<pre><code>{\n  \"nombre\": \"Juan\",\n  \"hobbies\": [\"leer\", \"caminar\"],\n  \"activo\": true,\n  \"contacto\": null\n}\n</code></pre>"},{"location":"content/p5/#ejemplo-invalido","title":"Ejemplo inv\u00e1lido","text":"<pre><code>{\n  nombre: \"Juan\", // Error: clave sin comillas\n  \"hobbies\": [\"leer\", \"caminar\",], // Error: coma final\n  \"activo\": true // Error: falta coma\n}\n</code></pre>"},{"location":"content/p5/#3-metodos-principales-de-json-en-javascript","title":"3. M\u00e9todos Principales de JSON en JavaScript","text":"<p>JavaScript ofrece dos m\u00e9todos clave para trabajar con JSON: <code>JSON.parse()</code> y <code>JSON.stringify()</code>.</p>"},{"location":"content/p5/#31-jsonparse","title":"3.1. <code>JSON.parse()</code>","text":"<p>Convierte una cadena JSON v\u00e1lida en un objeto JavaScript.</p>"},{"location":"content/p5/#sintaxis","title":"Sintaxis","text":"<pre><code>const objeto = JSON.parse(cadenaJSON);\n</code></pre>"},{"location":"content/p5/#ejemplo","title":"Ejemplo","text":"<pre><code>const jsonString = '{\"nombre\": \"Ana\", \"edad\": 25}';\nconst objeto = JSON.parse(jsonString);\nconsole.log(objeto.nombre); // Ana\nconsole.log(objeto.edad); // 25\n</code></pre>"},{"location":"content/p5/#manejo-de-errores","title":"Manejo de errores","text":"<p><code>JSON.parse()</code> lanza un <code>SyntaxError</code> si la cadena no es v\u00e1lida. Usa <code>try...catch</code> para manejar errores.</p> <pre><code>try {\n  const jsonInvalido = '{\"nombre\": \"Ana\", edad: 25}';\n  const objeto = JSON.parse(jsonInvalido);\n} catch (error) {\n  console.error(\"Error al parsear JSON:\", error.message);\n}\n</code></pre>"},{"location":"content/p5/#32-jsonstringify","title":"3.2. <code>JSON.stringify()</code>","text":"<p>Convierte un valor JavaScript (objeto, array, etc.) en una cadena JSON.</p>"},{"location":"content/p5/#sintaxis_1","title":"Sintaxis","text":"<pre><code>const cadenaJSON = JSON.stringify(valor);\n</code></pre>"},{"location":"content/p5/#ejemplo_1","title":"Ejemplo","text":"<pre><code>const objeto = {\n  nombre: \"Juan\",\n  edad: 30,\n  cursos: [\"JavaScript\", \"Python\"]\n};\nconst jsonString = JSON.stringify(objeto);\nconsole.log(jsonString);\n// {\"nombre\":\"Juan\",\"edad\":30,\"cursos\":[\"JavaScript\",\"Python\"]}\n</code></pre>"},{"location":"content/p5/#opciones-avanzadas","title":"Opciones avanzadas","text":"<ul> <li>Replacer: Funci\u00f3n para transformar valores antes de serializar.</li> <li>Space: A\u00f1ade espacios o tabulaciones para formato legible.</li> </ul> <p><pre><code>const objeto = { nombre: \"Ana\", edad: 25 };\nconst jsonFormateado = JSON.stringify(objeto, null, 2);\nconsole.log(jsonFormateado);\n</code></pre> Salida: <pre><code>{\n  \"nombre\": \"Ana\",\n  \"edad\": 25\n}\n</code></pre></p>"},{"location":"content/p5/#ejemplo-con-replacer","title":"Ejemplo con replacer","text":"<pre><code>const objeto = { nombre: \"Ana\", salario: 50000 };\nconst jsonFiltrado = JSON.stringify(objeto, (clave, valor) =&gt; {\n  if (clave === \"salario\") return undefined;\n  return valor;\n});\nconsole.log(jsonFiltrado); // {\"nombre\":\"Ana\"}\n</code></pre>"},{"location":"content/p5/#4-casos-de-uso-de-json","title":"4. Casos de Uso de JSON","text":"<p>JSON es fundamental en aplicaciones modernas. Algunos usos incluyen:</p> <ul> <li>APIs REST: Respuestas de servidores en formato JSON.</li> <li>Configuraci\u00f3n: Archivos de configuraci\u00f3n en aplicaciones.</li> <li>Intercambio de datos: Comunicaci\u00f3n cliente-servidor.</li> <li>Bases de datos: MongoDB y otras usan formatos JSON-like.</li> </ul>"},{"location":"content/p5/#ejemplo-de-consumo-de-api","title":"Ejemplo de consumo de API","text":"<pre><code>fetch(\"https://api.example.com/usuarios\")\n  .then(respuesta =&gt; respuesta.json())\n  .then(datos =&gt; console.log(datos))\n  .catch(error =&gt; console.error(\"Error:\", error));\n</code></pre>"},{"location":"content/p5/#5-trabajando-con-ciclos-y-json","title":"5. Trabajando con Ciclos y JSON","text":"<p>Los ciclos son esenciales para procesar datos JSON, especialmente en objetos anidados o arrays.</p>"},{"location":"content/p5/#51-iterar-sobre-un-objeto-json","title":"5.1. Iterar sobre un objeto JSON","text":"<p>Usa <code>for...in</code> para recorrer las propiedades de un objeto.</p> <p><pre><code>const jsonString = '{\"nombre\": \"Ana\", \"edad\": 25, \"ciudad\": \"Madrid\"}';\nconst objeto = JSON.parse(jsonString);\n\nfor (let clave in objeto) {\n  console.log(`${clave}: ${objeto[clave]}`);\n}\n</code></pre> Salida: <pre><code>nombre: Ana\nedad: 25\nciudad: Madrid\n</code></pre></p>"},{"location":"content/p5/#52-iterar-sobre-un-array-json","title":"5.2. Iterar sobre un array JSON","text":"<p>Usa <code>for...of</code> o m\u00e9todos como <code>forEach</code>.</p> <p><pre><code>const jsonString = '[{\"nombre\": \"Ana\", \"edad\": 25}, {\"nombre\": \"Juan\", \"edad\": 30}]';\nconst array = JSON.parse(jsonString);\n\narray.forEach(persona =&gt; {\n  console.log(`Nombre: ${persona.nombre}, Edad: ${persona.edad}`);\n});\n</code></pre> Salida: <pre><code>Nombre: Ana, Edad: 25\nNombre: Juan, Edad: 30\n</code></pre></p>"},{"location":"content/p5/#6-validacion-y-seguridad","title":"6. Validaci\u00f3n y Seguridad","text":""},{"location":"content/p5/#validacion","title":"Validaci\u00f3n","text":"<p>Verifica que una cadena JSON sea v\u00e1lida antes de parsearla para evitar errores.</p> <pre><code>function esJSONValido(cadena) {\n  try {\n    JSON.parse(cadena);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconsole.log(esJSONValido('{\"nombre\": \"Ana\"}')); // true\nconsole.log(esJSONValido('{\"nombre\": Ana}')); // false\n</code></pre>"},{"location":"content/p5/#seguridad","title":"Seguridad","text":"<ul> <li>No parses JSON de fuentes no confiables, ya que los datos podr\u00edan estar manipulados.</li> <li>Usa validadores como <code>JSONLint</code> para verificar la estructura.</li> </ul>"},{"location":"content/p5/#7-ejercicios-practicos","title":"7. Ejercicios Pr\u00e1cticos","text":"<p>A continuaci\u00f3n, 5 ejercicios con soluciones para practicar el uso de JSON en JavaScript.</p>"},{"location":"content/p5/#ejercicio-1-convertir-y-modificar-un-objeto-json","title":"Ejercicio 1: Convertir y modificar un objeto JSON","text":"<p>Enunciado: Crea un objeto de un producto, convi\u00e9rtelo a JSON, y parsea el JSON para a\u00f1adir una nueva propiedad.</p> <pre><code>const producto = {\n  nombre: \"Laptop\",\n  precio: 1000\n};\nconst jsonProducto = JSON.stringify(producto);\nconst objetoProducto = JSON.parse(jsonProducto);\nobjetoProducto.marca = \"TechBrand\";\nconsole.log(objetoProducto);\n// { nombre: \"Laptop\", precio: 1000, marca: \"TechBrand\" }\n</code></pre>"},{"location":"content/p5/#ejercicio-2-filtrar-datos-de-un-array-json","title":"Ejercicio 2: Filtrar datos de un array JSON","text":"<p>Enunciado: Filtra estudiantes con calificaci\u00f3n mayor a 80 desde un JSON.</p> <pre><code>const jsonEstudiantes = '[{\"nombre\": \"Ana\", \"calificacion\": 85}, {\"nombre\": \"Juan\", \"calificacion\": 70}]';\nconst estudiantes = JSON.parse(jsonEstudiantes);\nconst aprobados = estudiantes.filter(est =&gt; est.calificacion &gt; 80);\nconsole.log(aprobados);\n// [{ nombre: \"Ana\", calificacion: 85 }]\n</code></pre>"},{"location":"content/p5/#ejercicio-3-sumar-valores-de-un-json","title":"Ejercicio 3: Sumar valores de un JSON","text":"<p>Enunciado: Calcula la suma de precios en un objeto JSON.</p> <pre><code>const jsonPrecios = '{\"manzana\": 2, \"pera\": 3, \"naranja\": 1.5}';\nconst precios = JSON.parse(jsonPrecios);\nlet suma = 0;\nfor (let fruta in precios) {\n  suma += precios[fruta];\n}\nconsole.log(`Suma total: ${suma}`);\n// Suma total: 6.5\n</code></pre>"},{"location":"content/p5/#ejercicio-4-formatear-json","title":"Ejercicio 4: Formatear JSON","text":"<p>Enunciado: Convierte un objeto complejo a JSON con formato legible.</p> <p><pre><code>const datos = {\n  usuario: {\n    nombre: \"Ana\",\n    direccion: { ciudad: \"Madrid\", pais: \"Espa\u00f1a\" }\n  },\n  pedidos: [100, 200]\n};\nconst jsonFormateado = JSON.stringify(datos, null, 2);\nconsole.log(jsonFormateado);\n</code></pre> Salida: <pre><code>{\n  \"usuario\": {\n    \"nombre\": \"Ana\",\n    \"direccion\": {\n      \"ciudad\": \"Madrid\",\n      \"pais\": \"Espa\u00f1a\"\n    }\n  },\n  \"pedidos\": [\n    100,\n    200\n  ]\n}\n</code></pre></p>"},{"location":"content/p5/#ejercicio-5-manejo-de-errores","title":"Ejercicio 5: Manejo de errores","text":"<p>Enunciado: Parsea un JSON inv\u00e1lido y maneja el error.</p> <pre><code>const jsonInvalido = '{\"nombre\": \"Ana\", edad: 25}';\ntry {\n  const objeto = JSON.parse(jsonInvalido);\n} catch (error) {\n  console.error(\"Error en JSON:\", error.message);\n}\n// Error en JSON: Unexpected token e in JSON at position 20\n</code></pre>"},{"location":"content/p6/","title":"Tutorial B\u00e1sico: Blog con Prisma y MySQL en NestJS","text":""},{"location":"content/p6/#introduccion","title":"Introducci\u00f3n","text":"<p>Este tutorial te guiar\u00e1 en la creaci\u00f3n de una API REST b\u00e1sica para un blog utilizando Prisma como ORM, MySQL como base de datos y NestJS como framework. Implementaremos operaciones CRUD (Crear, Leer, Actualizar, Eliminar) para gestionar usuarios y publicaciones, con una relaci\u00f3n uno-a-muchos (un usuario puede tener m\u00faltiples publicaciones). Tambi\u00e9n incluiremos un seeder para poblar la base de datos con datos iniciales. La documentaci\u00f3n est\u00e1 dise\u00f1ada para ser compatible con MkDocs Material.</p>"},{"location":"content/p6/#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener:</p> <ul> <li>Node.js (versi\u00f3n 18 o superior) y npm instalados.</li> <li>Una base de datos MySQL configurada con una cadena de conexi\u00f3n v\u00e1lida (por ejemplo, <code>mysql://root:password@localhost:3306/blog</code>).</li> <li>Conocimientos b\u00e1sicos de TypeScript, NestJS y MySQL.</li> <li>NestJS CLI instalado globalmente (<code>npm i -g @nestjs/cli</code>).</li> <li>Un editor de c\u00f3digo como Visual Studio Code.</li> <li>(Opcional) Docker para ejecutar MySQL si no lo tienes instalado localmente.</li> </ul>"},{"location":"content/p6/#estructura-del-tutorial","title":"Estructura del Tutorial","text":"<ol> <li>Configuraci\u00f3n del Proyecto</li> <li>Integraci\u00f3n de Prisma con MySQL</li> <li>Definici\u00f3n del Modelo de Datos</li> <li>Implementaci\u00f3n del Servicio Prisma</li> <li>Creaci\u00f3n de la API REST para Usuarios</li> <li>Creaci\u00f3n de la API REST para Publicaciones</li> <li>Creaci\u00f3n de un Seeder</li> <li>Ejecuci\u00f3n y Pruebas</li> <li>Conclusi\u00f3n y Recursos Adicionales</li> </ol>"},{"location":"content/p6/#1-configuracion-del-proyecto","title":"1. Configuraci\u00f3n del Proyecto","text":""},{"location":"content/p6/#11-crear-un-nuevo-proyecto-nestjs","title":"1.1. Crear un Nuevo Proyecto NestJS","text":"<p>Inicia un nuevo proyecto NestJS usando la CLI:</p> <pre><code>nest new blog-api\ncd blog-api\n</code></pre> <p>Selecciona npm como gestor de paquetes cuando se te solicite. Esto generar\u00e1 una estructura b\u00e1sica de proyecto.</p>"},{"location":"content/p6/#12-instalar-dependencias-necesarias","title":"1.2. Instalar Dependencias Necesarias","text":"<p>Instala las dependencias requeridas para Prisma y NestJS:</p> <pre><code>npm install @prisma/client\nnpm install --save-dev prisma\n</code></pre> <ul> <li><code>@prisma/client</code>: Cliente de Prisma para interactuar con la base de datos.</li> <li><code>prisma</code>: CLI de Prisma para gestionar esquemas y migraciones.</li> </ul>"},{"location":"content/p6/#13-configurar-el-archivo-env","title":"1.3. Configurar el Archivo <code>.env</code>","text":"<p>Crea un archivo <code>.env</code> en la ra\u00edz del proyecto y a\u00f1ade tu cadena de conexi\u00f3n a MySQL:</p> <pre><code>DATABASE_URL=\"mysql://root:password@localhost:3306/blog\"\n</code></pre> <p>Aseg\u00farate de reemplazar <code>root</code>, <code>password</code>, <code>localhost</code>, <code>3306</code> y <code>blog</code> con los valores correspondientes a tu configuraci\u00f3n de MySQL.</p>"},{"location":"content/p6/#2-integracion-de-prisma-con-mysql","title":"2. Integraci\u00f3n de Prisma con MySQL","text":""},{"location":"content/p6/#21-inicializar-prisma","title":"2.1. Inicializar Prisma","text":"<p>Ejecuta el siguiente comando para inicializar Prisma en el proyecto:</p> <pre><code>npx prisma init\n</code></pre> <p>Esto crear\u00e1 una carpeta <code>prisma</code> con un archivo <code>schema.prisma</code> y actualizar\u00e1 el archivo <code>.env</code> con la variable <code>DATABASE_URL</code> (que ya configuraste).</p>"},{"location":"content/p6/#22-configurar-el-esquema-de-prisma","title":"2.2. Configurar el Esquema de Prisma","text":"<p>Abre <code>prisma/schema.prisma</code> y config\u00faralo para MySQL:</p> <pre><code>generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n</code></pre> <p>Por ahora, no definimos modelos; lo haremos en el siguiente paso.</p>"},{"location":"content/p6/#3-definicion-del-modelo-de-datos","title":"3. Definici\u00f3n del Modelo de Datos","text":""},{"location":"content/p6/#31-crear-modelos-en-schemaprisma","title":"3.1. Crear Modelos en <code>schema.prisma</code>","text":"<p>Define los modelos <code>User</code> y <code>Post</code> en <code>prisma/schema.prisma</code>. Estos representar\u00e1n usuarios y publicaciones en el blog, con una relaci\u00f3n uno-a-muchos:</p> <pre><code>generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  name      String\n  posts     Post[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  content   String\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n</code></pre> <ul> <li>User: Representa un usuario con un ID \u00fanico, correo electr\u00f3nico, nombre y una relaci\u00f3n con sus publicaciones.</li> <li>Post: Representa una publicaci\u00f3n con un ID \u00fanico, t\u00edtulo, contenido, estado de publicaci\u00f3n y una relaci\u00f3n con el autor (usuario).</li> </ul>"},{"location":"content/p6/#32-generar-migraciones","title":"3.2. Generar Migraciones","text":"<p>Ejecuta una migraci\u00f3n para crear las tablas en la base de datos:</p> <pre><code>npx prisma migrate dev --name init\n</code></pre> <p>Esto genera una carpeta <code>prisma/migrations</code> con los archivos SQL correspondientes y aplica los cambios a la base de datos. Tambi\u00e9n genera el cliente de Prisma en <code>node_modules/@prisma/client</code>.</p>"},{"location":"content/p6/#33-generar-el-cliente-de-prisma","title":"3.3. Generar el Cliente de Prisma","text":"<p>Aseg\u00farate de que el cliente de Prisma est\u00e9 actualizado ejecutando:</p> <pre><code>npx prisma generate\n</code></pre>"},{"location":"content/p6/#4-implementacion-del-servicio-prisma","title":"4. Implementaci\u00f3n del Servicio Prisma","text":""},{"location":"content/p6/#41-crear-un-modulo-y-servicio-prisma","title":"4.1. Crear un M\u00f3dulo y Servicio Prisma","text":"<p>Genera un m\u00f3dulo y servicio para Prisma usando la CLI de NestJS:</p> <pre><code>nest generate module prisma\nnest generate service prisma\n</code></pre>"},{"location":"content/p6/#42-configurar-el-servicio-prisma","title":"4.2. Configurar el Servicio Prisma","text":"<p>Edita <code>src/prisma/prisma.service.ts</code> para inicializar el cliente de Prisma y manejar la conexi\u00f3n a la base de datos:</p> <pre><code>import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  constructor() {\n    super();\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n</code></pre>"},{"location":"content/p6/#43-exportar-el-servicio-en-el-modulo","title":"4.3. Exportar el Servicio en el M\u00f3dulo","text":"<p>Actualiza <code>src/prisma/prisma.module.ts</code> para exportar el servicio y permitir su inyecci\u00f3n en otros m\u00f3dulos:</p> <pre><code>import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n</code></pre>"},{"location":"content/p6/#5-creacion-de-la-api-rest-para-usuarios","title":"5. Creaci\u00f3n de la API REST para Usuarios","text":""},{"location":"content/p6/#51-generar-un-modulo-de-usuarios","title":"5.1. Generar un M\u00f3dulo de Usuarios","text":"<p>Crea un m\u00f3dulo, controlador y servicio para manejar usuarios:</p> <pre><code>nest generate module users\nnest generate controller users\nnest generate service users\n</code></pre>"},{"location":"content/p6/#52-definir-dtos-para-usuarios","title":"5.2. Definir DTOs para Usuarios","text":"<p>Crea una carpeta <code>src/users/dto</code> y a\u00f1ade los siguientes archivos para manejar la validaci\u00f3n de datos.</p> <p><code>create-user.dto.ts</code>:</p> <pre><code>export class CreateUserDto {\n  email: string;\n  name: string;\n}\n</code></pre> <p><code>update-user.dto.ts</code>:</p> <pre><code>export class UpdateUserDto {\n  email?: string;\n  name?: string;\n}\n</code></pre>"},{"location":"content/p6/#53-implementar-el-servicio-de-usuarios","title":"5.3. Implementar el Servicio de Usuarios","text":"<p>Edita <code>src/users/users.service.ts</code> para manejar operaciones CRUD con Prisma:</p> <pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(createUserDto: CreateUserDto) {\n    return this.prisma.user.create({\n      data: createUserDto,\n    });\n  }\n\n  async findAll() {\n    return this.prisma.user.findMany({\n      include: { posts: true },\n    });\n  }\n\n  async findOne(id: number) {\n    const user = await this.prisma.user.findUnique({\n      where: { id },\n      include: { posts: true },\n    });\n    if (!user) {\n      throw new NotFoundException('Usuario no encontrado');\n    }\n    return user;\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto) {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n    if (!user) {\n      throw new NotFoundException('Usuario no encontrado');\n    }\n    return this.prisma.user.update({\n      where: { id },\n      data: updateUserDto,\n    });\n  }\n\n  async remove(id: number) {\n    const user = await this.prisma.user.findUnique({ where: { id } });\n    if (!user) {\n      throw new NotFoundException('Usuario no encontrado');\n    }\n    return this.prisma.user.delete({ where: { id } });\n  }\n}\n</code></pre>"},{"location":"content/p6/#54-implementar-el-controlador-de-usuarios","title":"5.4. Implementar el Controlador de Usuarios","text":"<p>Edita <code>src/users/users.controller.ts</code> para definir los endpoints REST:</p> <pre><code>import { Controller, Get, Post, Body, Patch, Param, Delete, ParseIntPipe } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id', ParseIntPipe) id: number, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.usersService.remove(id);\n  }\n}\n</code></pre>"},{"location":"content/p6/#55-configurar-el-modulo-de-usuarios","title":"5.5. Configurar el M\u00f3dulo de Usuarios","text":"<p>Actualiza <code>src/users/users.module.ts</code> para importar el m\u00f3dulo Prisma:</p> <pre><code>import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n</code></pre>"},{"location":"content/p6/#6-creacion-de-la-api-rest-para-publicaciones","title":"6. Creaci\u00f3n de la API REST para Publicaciones","text":""},{"location":"content/p6/#61-generar-un-modulo-de-publicaciones","title":"6.1. Generar un M\u00f3dulo de Publicaciones","text":"<p>Crea un m\u00f3dulo, controlador y servicio para manejar publicaciones:</p> <pre><code>nest generate module posts\nnest generate controller posts\nnest generate service posts\n</code></pre>"},{"location":"content/p6/#62-definir-dtos-para-publicaciones","title":"6.2. Definir DTOs para Publicaciones","text":"<p>Crea una carpeta <code>src/posts/dto</code> y a\u00f1ade los siguientes archivos.</p> <p><code>create-post.dto.ts</code>:</p> <pre><code>export class CreatePostDto {\n  title: string;\n  content: string;\n  published: boolean;\n  authorId: number;\n}\n</code></pre> <p><code>update-post.dto.ts</code>:</p> <pre><code>export class UpdatePostDto {\n  title?: string;\n  content?: string;\n  published?: boolean;\n}\n</code></pre>"},{"location":"content/p6/#63-implementar-el-servicio-de-publicaciones","title":"6.3. Implementar el Servicio de Publicaciones","text":"<p>Edita <code>src/posts/posts.service.ts</code>:</p> <pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(createPostDto: CreatePostDto) {\n    const { authorId } = createPostDto;\n    const user = await this.prisma.user.findUnique({ where: { id: authorId } });\n    if (!user) {\n      throw new NotFoundException('Usuario no encontrado');\n    }\n    return this.prisma.post.create({\n      data: createPostDto,\n    });\n  }\n\n  async findAll() {\n    return this.prisma.post.findMany({\n      include: { author: true },\n    });\n  }\n\n  async findOne(id: number) {\n    const post = await this.prisma.post.findUnique({\n      where: { id },\n      include: { author: true },\n    });\n    if (!post) {\n      throw new NotFoundException('Publicaci\u00f3n no encontrada');\n    }\n    return post;\n  }\n\n  async update(id: number, updatePostDto: UpdatePostDto) {\n    const post = await this.prisma.post.findUnique({ where: { id } });\n    if (!post) {\n      throw new NotFoundException('Publicaci\u00f3n no encontrada');\n    }\n    return this.prisma.post.update({\n      where: { id },\n      data: updatePostDto,\n    });\n  }\n\n  async remove(id: number) {\n    const post = await this.prisma.post.findUnique({ where: { id } });\n    if (!post) {\n      throw new NotFoundException('Publicaci\u00f3n no encontrada');\n    }\n    return this.prisma.post.delete({ where: { id } });\n  }\n}\n</code></pre>"},{"location":"content/p6/#64-implementar-el-controlador-de-publicaciones","title":"6.4. Implementar el Controlador de Publicaciones","text":"<p>Edita <code>src/posts/posts.controller.ts</code>:</p> <pre><code>import { Controller, Get, Post, Body, Patch, Param, Delete, ParseIntPipe } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { UpdatePostDto } from './dto/update-post.dto';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Post()\n  create(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.create(createPostDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.postsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.postsService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id', ParseIntPipe) id: number, @Body() updatePostDto: UpdatePostDto) {\n    return this.postsService.update(id, updatePostDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.postsService.remove(id);\n  }\n}\n</code></pre>"},{"location":"content/p6/#65-configurar-el-modulo-de-publicaciones","title":"6.5. Configurar el M\u00f3dulo de Publicaciones","text":"<p>Actualiza <code>src/posts/posts.module.ts</code>:</p> <pre><code>import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n</code></pre>"},{"location":"content/p6/#7-creacion-de-un-seeder","title":"7. Creaci\u00f3n de un Seeder","text":""},{"location":"content/p6/#71-configurar-el-script-de-seeder","title":"7.1. Configurar el Script de Seeder","text":"<p>Crea un archivo <code>prisma/seed.ts</code>:</p> <pre><code>import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Crear usuarios\n  await prisma.user.createMany({\n    data: [\n      { email: 'user1@example.com', name: 'Usuario 1' },\n      { email: 'user2@example.com', name: 'Usuario 2' },\n    ],\n    skipDuplicates: true,\n  });\n\n  // Crear publicaciones\n  await prisma.post.createMany({\n    data: [\n      {\n        title: 'Primer Post',\n        content: 'Este es el contenido del primer post.',\n        published: true,\n        authorId: 1,\n      },\n      {\n        title: 'Segundo Post',\n        content: 'Este es el contenido del segundo post.',\n        published: false,\n        authorId: 1,\n      },\n      {\n        title: 'Tercer Post',\n        content: 'Este es el contenido del tercer post.',\n        published: true,\n        authorId: 2,\n      },\n    ],\n  });\n\n  console.log('Base de datos poblada con \u00e9xito');\n}\n\nmain()\n  .catch((e) =&gt; {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(() =&gt; {\n    prisma.$disconnect();\n  });\n</code></pre>"},{"location":"content/p6/#72-configurar-el-comando-de-seeder","title":"7.2. Configurar el Comando de Seeder","text":"<p>Edita <code>package.json</code> para a\u00f1adir un comando de seeder:</p> <pre><code>\"prisma\": {\n  \"seed\": \"ts-node prisma/seed.ts\"\n}\n</code></pre>"},{"location":"content/p6/#73-ejecutar-el-seeder","title":"7.3. Ejecutar el Seeder","text":"<p>Pobla la base de datos con:</p> <pre><code>npx prisma db seed\n</code></pre>"},{"location":"content/p6/#8-ejecucion-y-pruebas","title":"8. Ejecuci\u00f3n y Pruebas","text":""},{"location":"content/p6/#81-iniciar-la-aplicacion","title":"8.1. Iniciar la Aplicaci\u00f3n","text":"<p>Ejecuta la aplicaci\u00f3n:</p> <pre><code>npm run start\n</code></pre> <p>La API estar\u00e1 disponible en <code>http://localhost:3000</code>.</p>"},{"location":"content/p6/#82-probar-los-endpoints","title":"8.2. Probar los Endpoints","text":"<p>Usa una herramienta como Postman o curl para probar los endpoints:</p> <ol> <li> <p>Crear usuario: <code>POST /users</code> <pre><code>{\n  \"email\": \"test@example.com\",\n  \"name\": \"Test User\"\n}\n</code></pre></p> </li> <li> <p>Obtener todos los usuarios: <code>GET /users</code></p> </li> <li> <p>Obtener usuario por ID: <code>GET /users/1</code></p> </li> <li> <p>Actualizar usuario: <code>PATCH /users/1</code> <pre><code>{\n  \"name\": \"Usuario Actualizado\"\n}\n</code></pre></p> </li> <li> <p>Eliminar usuario: <code>DELETE /users/1</code></p> </li> <li> <p>Crear publicaci\u00f3n: <code>POST /posts</code> <pre><code>{     \n  \"title\": \"Nueva Publicaci\u00f3n\",\n  \"content\": \"Contenido de la publicaci\u00f3n.\",\n  \"published\": true,\n  \"authorId\": 1\n}\n</code></pre></p> </li> <li> <p>Obtener todas las publicaciones: <code>GET /posts</code></p> </li> <li> <p>Obtener publicaci\u00f3n por ID: <code>GET /posts/1</code></p> </li> <li> <p>Actualizar publicaci\u00f3n: <code>PATCH /posts/1</code> <pre><code>{\n  \"title\": \"Publicaci\u00f3n Actualizada\"\n}\n</code></pre></p> </li> <li> <p>Eliminar publicaci\u00f3n: <code>DELETE /posts/1</code></p> </li> </ol>"},{"location":"content/p6/#83-verificar-la-base-de-datos","title":"8.3. Verificar la Base de Datos","text":"<p>Usa Prisma Studio para inspeccionar la base de datos:</p> <pre><code>npx prisma studio\n</code></pre> <p>Abre <code>http://localhost:5555</code> en tu navegador para ver y editar los datos.</p>"},{"location":"content/p6/#actividad-de-consulta-e-investigacion-agregar-comentarios-a-publicaciones-en-el-blog","title":"Actividad de Consulta e Investigaci\u00f3n: Agregar Comentarios a Publicaciones en el Blog","text":""},{"location":"content/p6/#introduccion_1","title":"Introducci\u00f3n","text":"<p>En esta actividad, extender\u00e1s la API del blog creada en el tutorial anterior para incluir la funcionalidad de comentarios en las publicaciones. Implementar\u00e1s un modelo de datos para comentarios, operaciones CRUD (Crear, Leer, Actualizar, Eliminar) para gestionar comentarios, y actualizar\u00e1s el seeder para poblar la base de datos con datos de ejemplo. La actividad est\u00e1 dise\u00f1ada para reforzar tus conocimientos en Prisma, MySQL, NestJS, y la creaci\u00f3n de APIs REST.</p>"},{"location":"content/p6/#objetivos","title":"Objetivos","text":"<ul> <li>Modificar el esquema de Prisma para incluir un modelo de comentarios con relaciones.</li> <li>Crear un m\u00f3dulo, servicio y controlador en NestJS para manejar comentarios.</li> <li>Implementar operaciones CRUD para comentarios.</li> <li>Actualizar el seeder para incluir comentarios de ejemplo.</li> <li>Probar la funcionalidad utilizando herramientas como Postman o Prisma Studio.</li> </ul>"},{"location":"content/p6/#prerrequisitos_1","title":"Prerrequisitos","text":"<ul> <li>Haber completado el tutorial anterior: \"Tutorial B\u00e1sico: Blog con Prisma y MySQL en NestJS\".</li> <li>Tener el proyecto del blog configurado y funcional.</li> <li>Acceso a una base de datos MySQL con la cadena de conexi\u00f3n configurada en el archivo <code>.env</code>.</li> <li>Conocimientos b\u00e1sicos de TypeScript, NestJS, Prisma, y MySQL.</li> <li>Herramientas como Postman o curl para probar la API.</li> <li>(Opcional) Prisma Studio para inspeccionar la base de datos.</li> </ul>"},{"location":"content/p7/","title":"Actividad Grupal: Dise\u00f1o e Implementaci\u00f3n de API Personalizada con NestJS y Prisma","text":"<p>Descripci\u00f3n General</p> <p>Como equipo de desarrollo, su tarea es dise\u00f1ar y construir una API RESTful completa utilizando NestJS como framework, Prisma como ORM y MySQL como sistema de gesti\u00f3n de bases de datos relacionales. Esta actividad busca consolidar los conceptos aprendidos sobre la arquitectura de proyectos en NestJS, la definici\u00f3n de modelos, el manejo de relaciones con Prisma y la implementaci\u00f3n de l\u00f3gica de negocio.</p>"},{"location":"content/p7/#tema-del-proyecto","title":"Tema del Proyecto","text":"<p>La elecci\u00f3n del tema para la API es completamente libre. Pueden dise\u00f1ar cualquier tipo de sistema, como:</p> <ul> <li>Un sistema de gesti\u00f3n para un peque\u00f1o negocio.</li> <li>Una plataforma de e-commerce simplificada.</li> <li>Una aplicaci\u00f3n para organizar eventos.</li> <li>Una red social b\u00e1sica.</li> </ul> <p>Tip</p> <p>Escojan un tema que les permita explorar y aplicar los conocimientos de dise\u00f1o de bases de datos y arquitectura de software de manera pr\u00e1ctica.</p>"},{"location":"content/p7/#requisitos-minimos","title":"Requisitos M\u00ednimos","text":""},{"location":"content/p7/#1-entidades","title":"1. Entidades","text":"<p>La API debe gestionar al menos tres (3) entidades distintas relevantes al tema elegido. Cada entidad debe tener propiedades coherentes con su prop\u00f3sito.</p>"},{"location":"content/p7/#2-relaciones-de-base-de-datos","title":"2. Relaciones de Base de Datos","text":"<p>Deben establecer al menos dos (2) relaciones significativas entre las entidades, como:</p> <ul> <li>Relaci\u00f3n uno-a-muchos.</li> <li>Relaci\u00f3n muchos-a-muchos.</li> </ul> <p>Estas relaciones deben ser l\u00f3gicas y funcionales para el dominio de la aplicaci\u00f3n.</p>"},{"location":"content/p7/#3-arquitectura-nestjs","title":"3. Arquitectura NestJS","text":"<ul> <li>M\u00f3dulos: Organizar el c\u00f3digo en m\u00f3dulos (<code>@Module()</code>) espec\u00edficos para cada entidad o funcionalidad principal.</li> <li>Controladores: Implementar controladores (<code>@Controller()</code>) para manejar solicitudes HTTP (GET, POST, PUT, DELETE, PATCH, etc.), delegando la l\u00f3gica de negocio a servicios.</li> <li>Servicios: Desarrollar servicios (<code>@Injectable()</code>) que encapsulen la l\u00f3gica de negocio para operaciones CRUD (Crear, Leer, Actualizar, Eliminar), interactuando con la base de datos a trav\u00e9s de Prisma.</li> <li>DTOs: Utilizar Data Transfer Objects para definir la estructura de los datos enviados y recibidos en las solicitudes (por ejemplo, para crear o actualizar una entidad).</li> <li>Inyecci\u00f3n de Dependencias: Conectar controladores con servicios y servicios con el <code>PrismaService</code>.</li> </ul>"},{"location":"content/p7/#4-integracion-con-prisma-y-mysql","title":"4. Integraci\u00f3n con Prisma y MySQL","text":"<ul> <li>Esquemas: Definir las entidades y sus relaciones en el archivo <code>prisma/schema.prisma</code>.</li> <li>Migraciones: Generar y aplicar migraciones con Prisma (<code>npx prisma migrate dev</code>) para crear las tablas en MySQL.</li> <li>PrismaService: Configurar un servicio <code>PrismaService</code> para gestionar la conexi\u00f3n y desconexi\u00f3n con la base de datos, utilizado por todos los servicios para operaciones de persistencia.</li> <li>Conexi\u00f3n a MySQL: Configurar la conexi\u00f3n a trav\u00e9s de la variable de entorno <code>DATABASE_URL</code> en el archivo <code>.env</code>.</li> </ul>"},{"location":"content/p7/#5-flujo-de-solicitud","title":"5. Flujo de Solicitud","text":"<p>La implementaci\u00f3n debe reflejar claramente el flujo de una solicitud HTTP:</p> <ol> <li>Llega al controlador.</li> <li>Pasa al servicio para aplicar la l\u00f3gica de negocio.</li> <li>Interact\u00faa con la base de datos a trav\u00e9s de Prisma (si es necesario).</li> <li>Devuelve una respuesta al cliente.</li> </ol>"},{"location":"content/p7/#6-poblado-de-datos-opcional","title":"6. Poblado de Datos (Opcional)","text":"<p>Considerar la creaci\u00f3n de un seeder para poblar la base de datos con datos iniciales de prueba.</p>"},{"location":"content/p7/#rubrica-de-evaluacion-proyecto-de-api-con-nestjs-y-prisma","title":"R\u00fabrica de Evaluaci\u00f3n: Proyecto de API con NestJS y Prisma","text":"<p>Descripci\u00f3n General</p> <p>Esta r\u00fabrica eval\u00faa el desarrollo de una API RESTful con NestJS, Prisma y MySQL a lo largo de tres clases. Cada clase eval\u00faa aspectos espec\u00edficos del proyecto, desde la planificaci\u00f3n inicial hasta la implementaci\u00f3n completa y la exposici\u00f3n final. La Clase 3 incluye una presentaci\u00f3n oral del proyecto.</p>"},{"location":"content/p7/#estructura-de-evaluacion","title":"Estructura de Evaluaci\u00f3n","text":"<p>La evaluaci\u00f3n se divide en tres clases, con criterios espec\u00edficos para cada una. Cada criterio tiene una ponderaci\u00f3n y una escala de puntuaci\u00f3n (0 a 100). La nota final por clase se calcula seg\u00fan el cumplimiento de los criterios.</p>"},{"location":"content/p7/#escala-de-puntuacion","title":"Escala de Puntuaci\u00f3n","text":"Puntuaci\u00f3n Descripci\u00f3n 90-100 Excelente: Cumple todos los requisitos con alta calidad y creatividad. 70-89 Bueno: Cumple la mayor\u00eda de los requisitos con buena implementaci\u00f3n. 50-69 Regular: Cumple parcialmente los requisitos, con errores o limitaciones. 0-49 Insuficiente: No cumple los requisitos o presenta errores graves."},{"location":"content/p7/#clase-1-planificacion-y-diseno-inicial","title":"Clase 1: Planificaci\u00f3n y Dise\u00f1o Inicial","text":"<p>Objetivo</p> <p>Evaluar la capacidad del equipo para definir el tema, las entidades, las relaciones y la estructura inicial del proyecto.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Definici\u00f3n del Tema El tema es claro, relevante y permite explorar los conceptos de dise\u00f1o de bases de datos y arquitectura de software. 20% 0-100 Dise\u00f1o de Entidades Se definen al menos tres entidades con propiedades coherentes y bien documentadas. 30% 0-100 Relaciones Se establecen al menos dos relaciones l\u00f3gicas y funcionales entre las entidades, documentadas en el esquema <code>prisma/schema.prisma</code>. 30% 0-100 Planificaci\u00f3n de M\u00f3dulos Se presenta un esquema inicial de la arquitectura modular en NestJS (m\u00f3dulos, controladores, servicios). 20% 0-100 <p>Entregable Esperado</p> <ul> <li>Documento o presentaci\u00f3n con el tema, entidades, relaciones y esquema inicial de <code>schema.prisma</code>.</li> <li>Diagrama preliminar de la arquitectura de NestJS.</li> </ul>"},{"location":"content/p7/#clase-2-implementacion-y-progreso-tecnico","title":"Clase 2: Implementaci\u00f3n y Progreso T\u00e9cnico","text":"<p>Objetivo</p> <p>Evaluar el avance en la implementaci\u00f3n t\u00e9cnica de la API, incluyendo la configuraci\u00f3n de la base de datos y la l\u00f3gica de negocio.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Configuraci\u00f3n de Prisma y MySQL Conexi\u00f3n a MySQL configurada correctamente (<code>DATABASE_URL</code> en <code>.env</code>) y migraciones aplicadas sin errores. 20% 0-100 Implementaci\u00f3n de M\u00f3dulos y Controladores Los m\u00f3dulos y controladores est\u00e1n organizados y manejan solicitudes HTTP para todas las entidades (GET, POST, PUT, DELETE, etc.). 25% 0-100 Servicios y L\u00f3gica de Negocio Los servicios implementan operaciones CRUD completas, utilizando el <code>PrismaService</code> para interactuar con la base de datos. 30% 0-100 Uso de DTOs Se implementan DTOs para estructurar los datos de entrada y salida en las solicitudes. 15% 0-100 Pruebas Iniciales La API responde correctamente a solicitudes de prueba (por ejemplo, con <code>curl</code> o Postman). 10% 0-100 <p>Entregable Esperado</p> <ul> <li>C\u00f3digo fuente parcial con m\u00f3dulos, controladores, servicios y DTOs implementados.</li> <li>Archivo <code>schema.prisma</code> actualizado y migraciones aplicadas.</li> <li>Ejemplos de solicitudes HTTP funcionales.</li> </ul>"},{"location":"content/p7/#clase-3-implementacion-final-y-exposicion","title":"Clase 3: Implementaci\u00f3n Final y Exposici\u00f3n","text":"<p>Objetivo</p> <p>Evaluar la implementaci\u00f3n completa de la API y la calidad de la exposici\u00f3n oral del proyecto.</p> Criterio Descripci\u00f3n Ponderaci\u00f3n Puntuaci\u00f3n Funcionalidad Completa La API cumple con todos los requisitos m\u00ednimos: al menos tres entidades, dos relaciones, operaciones CRUD funcionales y flujo completo de solicitudes HTTP. 30% 0-100 Calidad del C\u00f3digo El c\u00f3digo est\u00e1 organizado, modular, sigue las mejores pr\u00e1cticas de NestJS y usa inyecci\u00f3n de dependencias correctamente. 20% 0-100 Documentaci\u00f3n El archivo <code>README.md</code> explica claramente el tema, las entidades, las relaciones, c\u00f3mo ejecutar la API y ejemplos de solicitudes. 20% 0-100 Exposici\u00f3n Oral La presentaci\u00f3n es clara, estructurada, muestra el funcionamiento de la API y responde a preguntas de manera efectiva. 20% 0-100 Creatividad y Extras Se incluyen elementos adicionales (como un seeder, validaciones avanzadas o caracter\u00edsticas \u00fanicas) que enriquecen el proyecto. 10% 0-100 <p>Entregable Esperado</p> <ul> <li>C\u00f3digo fuente completo y funcional de la API.</li> <li>Archivo <code>README.md</code> completo con instrucciones claras.</li> <li>Presentaci\u00f3n oral (5-10 minutos) que explique el proyecto, muestre la API en acci\u00f3n y responda preguntas.</li> </ul> <p>Formato Sugerido para la Exposici\u00f3n</p> <ul> <li>Introducci\u00f3n (1-2 min): Presentar el tema y el prop\u00f3sito de la API.</li> <li>Demostraci\u00f3n (3-5 min): Mostrar solicitudes HTTP en acci\u00f3n (usando Postman o <code>curl</code>) y explicar el flujo de una solicitud.</li> <li>Explicaci\u00f3n T\u00e9cnica (2-3 min): Describir las entidades, relaciones, arquitectura y decisiones de dise\u00f1o.</li> <li>Conclusi\u00f3n (1-2 min): Resumir aportes, desaf\u00edos superados y posibles mejoras.</li> </ul>"},{"location":"content/p7/#calculo-de-la-nota-final","title":"C\u00e1lculo de la Nota Final","text":"<p>La nota final del proyecto se calcula como el promedio ponderado de las tres clases:</p> <ul> <li>Clase 1: 30%</li> <li>Clase 2: 30%</li> <li>Clase 3: 40%</li> </ul> <p>Instrucciones para la Evaluaci\u00f3n</p> <ul> <li>Cada clase debe entregar los avances correspondientes en un repositorio (por ejemplo, GitHub).</li> <li>La exposici\u00f3n en la Clase 3 debe ser presentada por todos los miembros del equipo.</li> <li>Se valorar\u00e1 la colaboraci\u00f3n y la distribuci\u00f3n equitativa de tareas entre los integrantes.</li> </ul>"},{"location":"pi/p1/","title":"Introducci\u00f3n Proyecto Integrador","text":""}]}